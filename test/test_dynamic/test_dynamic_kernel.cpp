#include "test_dynamic_kernel.h"
#include <iostream>
#include <aris.h>

using namespace aris::dynamic;

const double error = 1e-10;

void test_blk() 
{
	const double A[]{0.083469814858914,0.0604711791698936,0.291984079961715,0.372409740055537,0.0526769976807926,0.417744104316662,0.698105520180308,0.032600820530528,0.460725937260412,
		0.133171007607162,0.399257770613576, 0.43165117024872,0.198118402542975,0.737858095516997,0.983052466469856,0.666527913402587, 0.56119979270966, 0.98163795097075,
		0.173388613119006,0.526875830508296,0.015487125636019,0.489687638016024,0.269119426398556,0.301454948712065,0.178132454400338, 0.88186650045181,0.156404952226563,
		0.390937802323736,0.416799467930787,0.984063724379154,0.339493413390758,0.422835615008808,0.701098755900926,0.128014399720173,0.669175304534394,0.855522805845911,
		0.83137974283907,0.656859890973707,0.167168409914656,0.951630464777727,0.547870901214845,0.666338851584426,0.999080394761361,0.190433267179954,0.644764536870088,
		0.80336439160244,0.627973359190104,0.106216344928664,0.920332039836564,0.942736984276934,0.539126465042857,0.171121066356432,0.368916546063895,0.376272210278832 };
	const double AT[]{ 0.083469814858914,0.133171007607162,0.173388613119006,0.390937802323736, 0.83137974283907, 0.80336439160244,
		0.0604711791698936,0.399257770613576,0.526875830508296,0.416799467930787,0.656859890973707,0.627973359190104,
		0.291984079961715, 0.43165117024872,0.015487125636019,0.984063724379154,0.167168409914656,0.106216344928664,
		0.372409740055537,0.198118402542975,0.489687638016024,0.339493413390758,0.951630464777727,0.920332039836564,
		0.0526769976807926,0.737858095516997,0.269119426398556,0.422835615008808,0.547870901214845,0.942736984276934,
		0.417744104316662,0.983052466469856,0.301454948712065,0.701098755900926,0.666338851584426,0.539126465042857,
		0.698105520180308,0.666527913402587,0.178132454400338,0.128014399720173,0.999080394761361,0.171121066356432,
		0.032600820530528, 0.56119979270966, 0.88186650045181,0.669175304534394,0.190433267179954,0.368916546063895,
		0.460725937260412, 0.98163795097075,0.156404952226563,0.855522805845911,0.644764536870088,0.376272210278832 };
	const double B[]{ 0.32514568182056,0.440085139001721,0.676122303863752,0.344462411301042,0.424349039815375,
		0.105629203329022,0.527142741760652,0.289064571674477,0.780519652731358,0.460916366028964,
		0.610958658746201,0.457424365687674,0.671808165414215,   0.675332065747,0.770159728608609,
		0.778802241824093,0.875371598604185,0.695140499551737,0.00671531431847749,0.322471807186779,
		0.423452918962738,0.518052108361104,0.0679927684700106,0.602170487581795,0.784739294760742,
		0.0908232857874395,0.943622624548388,0.254790156597005,0.386771194520985,0.471357153710612,
		0.266471490779072,0.637709098072174,0.224040030824219,0.915991244131425,0.0357627332691179,
		0.153656717591307,0.957693939841583,0.667832727013717,0.00115105712910724,0.175874415683531,
		0.281005302533871, 0.24070703548016,0.844392156527205,0.462449159242329,0.721758033391102 };
	const double BT[]{ 0.32514568182056,0.105629203329022,0.610958658746201,0.778802241824093,0.423452918962738,0.0908232857874395,0.266471490779072,0.153656717591307,0.281005302533871,
		0.440085139001721,0.527142741760652,0.457424365687674,0.875371598604185,0.518052108361104,0.943622624548388,0.637709098072174,0.957693939841583,0.24070703548016,
		0.676122303863752,0.289064571674477,0.671808165414215,0.695140499551737,0.0679927684700106,0.254790156597005,0.224040030824219,0.667832727013717,0.844392156527205,
		0.344462411301042,0.780519652731358,  0.675332065747,0.00671531431847749,0.602170487581795,0.386771194520985,0.915991244131425,0.00115105712910724,0.462449159242329,
		0.424349039815375,0.460916366028964,0.770159728608609,0.322471807186779,0.784739294760742,0.471357153710612,0.0357627332691179,0.175874415683531,0.721758033391102 };
	const double C[]{ 0.882699220389462,1.53696035254701,1.20617784639246,1.32148852911613,1.00973535379553,
		1.44490982798386,3.14862260940081,2.28680308612416,2.54000934334887,2.51030105404234,
		0.871122945877781,2.20946761947791,1.47636028538785,0.999872211710309,1.11389732784129,
		1.65682740032538,2.94813131784912,2.68725848495219,2.16628320911793,2.62740013735909,
		1.9521547101672,3.50893087374696,2.62828481759543,2.71952708284136,2.36977862102099,
		1.76538308227268,3.08892358329822,2.23971174415062,1.95216979243096,2.34543889613871 };

	double result[100];

	BlockSize m{ 2,4 }, n{ 3,2 }, k{ 1,3,5 };
	BlockMatrix a, at, b, bt, c;

	s_blk_make(A, m, k, a);
	s_blk_make(AT, k, m, at);
	s_blk_make(B, k, n, b);
	s_blk_make(BT, n, k, bt);
	
	s_blk_allocate(m, n, c);
	s_blk_mm(m, n, k, a, b, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mm\" failed" << std::endl;

	s_blk_allocate(m, n, c);
	s_blk_mmNT(m, n, k, a, bt, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mmNT\" failed" << std::endl;

	s_blk_allocate(m, n, c);
	s_blk_mmTN(m, n, k, at, b, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mmTN\" failed" << std::endl;

	s_blk_mmTT(m, n, k, at, bt, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mmTT\" failed" << std::endl;


	const double x[]{ 0.32514568182056,0.105629203329022,0.610958658746201,0.778802241824093,0.423452918962738,0.0908232857874395,0.266471490779072,0.153656717591307,0.281005302533871 };
	BlockMatrix x_blk;
	s_blk_make(x, {1,3,5}, { 1 }, x_blk);
	if (std::abs(s_blk_norm({1,3,5}, x_blk) - 1.20740354633406) > error)std::cout << "\"s_blk_norm\" failed" << std::endl;


}
void test_mtx_solver()
{
	const double A[]{ 1.82553083943141,1.42060601118548,1.36736238745112,1.50658906468564,1.86464891726001,1.04079482779702,
		1.42060601118548,2.10941693872417,1.92463386848915,1.23889223270807,2.23186828169132,1.22211204078486,
		1.36736238745112,1.92463386848915,2.06653199450749,1.37659815598197,2.07988145626914,1.30113287432829,
		1.50658906468564,1.23889223270807,1.37659815598197,1.69212820994619,1.67619205287543,0.914095057763804,
		1.86464891726001,2.23186828169132,2.07988145626914,1.67619205287543, 3.0881251584706,1.69495025317372,
		1.04079482779702,1.22211204078486,1.30113287432829,0.914095057763804,1.69495025317372,1.17872570447206 };
	
	const double b[]{ 0.765516788149002,0.709364830858073,
		0.795199901137063,0.754686681982361,
		0.186872604554379,0.276025076998578,
		0.489764395788231,0.679702676853675,
		0.445586200710899,0.655098003973841,
		0.646313010111265,0.162611735194631 };

	const double bT[]{ 0.765516788149002,0.795199901137063,0.186872604554379,0.489764395788231,0.445586200710899,0.646313010111265,
		0.709364830858073,0.754686681982361,0.276025076998578,0.679702676853675,0.655098003973841,0.162611735194631 };

	const double llt[]{ 1.35112206681388,1.05142684445637,1.01201987669074,1.11506510158506,1.38007435675823,0.770318873002606,
		1.05142684445637,1.00195734913254,0.858887859606139,0.0663529756457487,0.779295701883798,0.411372898532454,
		1.01201987669074,0.858887859606139,0.551959607499983,0.346294079395723,0.025166983849247,0.30478983036659,
		1.11506510158506,0.0663529756457487,0.346294079395723,0.569592593325883,0.135000937041167, - 0.136419197085494,
		1.38007435675823,0.779295701883798,0.025166983849247,0.135000937041167,0.746565139312267,0.431332592509531,
		0.770318873002606,0.411372898532454,0.30478983036659,-0.136419197085494,0.431332592509531,0.344313858756401 };

	const double inv_l[]{ 0.740125577519527,0,0,0,0,0,
		-0.77666769064225,0.998046474598712,0,0,0,0,
		-0.148473446503069, -1.55303031002242,1.81172677567722,0,0,0,
		-1.26816697217082,0.827928336123375, -1.10147193494276,1.75564080663506,0,0,
		-0.323125426175609, -1.13916294185447,0.138104552985304, -0.31747149916724,1.3394678472681,0,
		-0.69415520561586,1.93742418585395, -2.21317495390761,1.09330166190531, -1.67799269315532,2.90432689410723 };

	const double inv_l_dot_b[]{ 0.566578554929674,0.525019055110873,
		0.19909430193153,0.202271637373723,
		-1.01006636357342,-0.777291110197726,
		0.341580853217506,0.614513319403422,
		-0.686050087570733,-0.389108108915027,
		2.26054438577134,0.474995191389852 };
	const double inv_u_dot_b[]{-1.29249793785305,-1.28863719172842,
		1.65350463041262,0.456066717040007,
		-1.56976591868037,-0.518007602446926,
		1.42500452780045,1.16312249077394,
		-0.487660119419236,0.604621409654585,
		1.87710425727744,0.472277635823185 };


	const double B[]{ 0.854463601335834,0.915158806735392,0.81779406393944,0,0,0,
		0.915158806735392,1.51973084603713,1.08911106493401,0,0,0,
		0.81779406393944,1.08911106493401,1.00718816511107,0,0,0,
		0,0,0,1.16505945742745,0.55867090856838,1.06119850911405,
		0,0,0,0.55867090856838,0.321956437380287,0.442097312015519,
		0,0,0,1.06119850911405,0.442097312015519,1.05023839402297 };

	const double B_llt[]{ 0.924372003760301,0.990033020269512,0.88470232829715,0,0,0,
		0.990033020269512,0.734551199585949,0.290281394858118,0,0,0,
		0.88470232829715,0.290281394858118,0.374468512983265,0,0,0,
		0,0,0,1.07937920001613,0.517585394048759,0.983156344960322,
		0,0,0,0.517585394048759,0.232511929258862, - 0.287168286010691,
		0,0,0,0.983156344960322, - 0.287168286010691,0.0342982637594407 };

	const double C[]{ 1.09756159899368,0.494892128610864,0,0,0,0.599982575914901,
		0.494892128610864,0.564212545623307,0,0,0,0.200848874880563,
		0,0,0.979041348469538,0.638782936554467,0.663380272499309,0,
		0,0,0.638782936554467,0.791575910209436,0.454993751889092,0,
		0,0,0.663380272499309,0.454993751889092,0.470703623796929,0,
		0.599982575914901,0.200848874880563,0,0,0,1.00673482446645 };

	const double C_llt[]{ 1.04764574117097,0.472384995387576,0,0,0,0.572696048231236,
		0.472384995387576,0.584007672685888,0,0,0, -0.119320598822187,
		0,0,0.989465183050691,0.645584046307713,0.670443269619648,0,
		0,0,0.645584046307713,0.612206786439351,0.0362071665314066,0,
		0,0,0.670443269619648,0.0362071665314066,0.141061997399768,0,
		0.572696048231236, -0.119320598822187,0,0,0,0.815178910119423 };
	double result[36];

	std::copy_n(A, 36, result);
	s_llt(6, A, result);
	if (!s_is_equal(36, llt, result, error))std::cout << "\"s_llt\" failed" << std::endl;

	s_inv_lm(6, llt, result);
	if (!s_is_equal(36, inv_l, result, error))std::cout << "\"s_inv_lm\" failed" << std::endl;

	s_sov_lm(6, 2, llt, b, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_sov_lm\" failed" << std::endl;

	s_sov_lmNT(6, 2, llt, bT, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_sov_lmNT\" failed" << std::endl;

	s_sov_um(6, 2, llt, b, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_sov_um\" failed" << std::endl;

	s_sov_umNT(6, 2, llt, bT, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_sov_umNT\" failed" << std::endl;

	BlockMatrix A_blk, L_blk, b_blk;
	BlockSize blk_size{ 1,3,2 };
	BlockSize b_blk_size{ 1,1 };
	
	s_blk_make(A, blk_size, blk_size, A_blk);
	s_blk_resolve(blk_size, blk_size, A_blk, result);
	if(!s_is_equal(36, A, result, error))std::cout << "\"s_make_symetric_blk\" or \"s_resolve_symetric_blk\" failed" << std::endl;

	s_blk_allocate(blk_size, blk_size, L_blk);
	for (std::size_t i = 0; i < blk_size.size(); ++i)for (std::size_t j = 0; j < blk_size.size(); ++j)
		if (L_blk[i][j].capacity()<static_cast<std::size_t>(blk_size[i]*blk_size[j]))std::cout << "\"s_allocate_symetric_blk\" failed" << std::endl;

	s_blk_llt(blk_size, A_blk, L_blk);
	s_blk_resolve(blk_size, blk_size, L_blk, result);
	if (!s_is_equal(36, llt, result, error))std::cout << "\"s_resolve_symetric_blk\" failed" << std::endl;


	blk_size = { 1,2,2,1 };
	s_blk_make(B, blk_size, blk_size, A_blk);
	A_blk[2][0].clear();
	A_blk[2][1].clear();
	A_blk[3][0].clear();
	A_blk[3][1].clear();
	A_blk[0][2].clear();
	A_blk[1][2].clear();
	A_blk[0][3].clear();
	A_blk[1][3].clear();
	s_blk_resolve(blk_size, blk_size, A_blk, result);
	if (!s_is_equal(36, B, result, error))std::cout << "\"s_blk_make\" or \"s_blk_resolve\" failed" << std::endl;

	s_blk_allocate(blk_size, blk_size, L_blk);
	s_blk_llt(blk_size, A_blk, L_blk);
	s_blk_resolve(blk_size, blk_size, L_blk, result);
	if (!s_is_equal(36, B_llt, result, error))std::cout << "\"s_blk_llt\" failed" << std::endl;
	if(s_blk_check_empty_num(A_blk)!=8)std::cout << "\"s_blk_llt\" failed:wrong empty num" << std::endl;

	blk_size = { 2,3,1 };
	s_blk_make(C, blk_size, blk_size, A_blk);
	A_blk[1][0].clear();
	A_blk[0][1].clear();
	A_blk[1][2].clear();
	A_blk[2][1].clear();
	s_blk_resolve(blk_size, blk_size, A_blk, result);
	if (!s_is_equal(36, C, result, error))std::cout << "\"s_blk_make\" or \"s_blk_resolve\" failed" << std::endl;

	s_blk_allocate(blk_size, blk_size, L_blk);
	s_blk_llt(blk_size, A_blk, L_blk);
	s_blk_resolve(blk_size, blk_size, L_blk, result);
	if (!s_is_equal(36, C_llt, result, error))std::cout << "\"s_blk_llt\" failed" << std::endl;
	if (s_blk_check_empty_num(A_blk) != 4)std::cout << "\"s_blk_llt\" failed:wrong empty num" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 2 }, b_blk);
	s_blk_sov_lm(blk_size, { 2 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 2 }, b_blk, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_blk_sov_lm\" failed" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 1,1 }, b_blk);
	s_blk_sov_lm(blk_size, { 1,1 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 1,1 }, b_blk, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_blk_sov_lm\" failed" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 2 }, b_blk);
	s_blk_sov_um(blk_size, { 2 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 2 }, b_blk, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_blk_sov_um\" failed" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 1,1 }, b_blk);
	s_blk_sov_um(blk_size, { 1,1 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 1,1 }, b_blk, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_blk_sov_um\" failed" << std::endl;
}
void test_mtx_and_vec()
{
	const double alpha{ 0.255095115459269 };
	const double v[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double v_ld[]{ 0.498364051982143,0,0,0.959743958516081,0,0,0.340385726666133,0,0,0.585267750979777,0,0,0.223811939491137,0,0,0.751267059305653,0,0 };
	const double r1[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0.149298944510773,0.0570933325456545,0.191644557234321};
	const double r1_ld[]{ 0.127130235381134,0,0,0.244825995908996,0,0,0.0868307362445845,0,0,0.149298944510773,0,0,0.0570933325456545,0,0,0.191644557234321,0,0 };
	const double r2[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double r2_ld[]{ 0.498364051982143,0,0.959743958516081,0,0.340385726666133,0,0.585267750979777,0,0.223811939491137,0,0.751267059305653,0 };
	const double r3[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0.149298944510773,0.0570933325456545,0.191644557234321 };
	const double r3_ld[]{ 0.127130235381134,0,0.244825995908996,0,0.0868307362445845,0,0.149298944510773,0,0.0570933325456545,0,0.191644557234321,0 };
	const double r4[]{ 1.00432110364729,1.65882068117277,1.23128897920193,1.54455917618522,0.77102746945494,0.889891502134332 };
	double r4_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double r4_ld[]{ 1.00432110364729,0,1.65882068117277,0,1.23128897920193,0,1.54455917618522,0,0.77102746945494,0,0.889891502134332,0 };
	double r4_ld_before[]{ 0.505957051665142,0,0.699076722656686,0,0.890903252535799,0,0.959291425205444,0,0.547215529963803,0,0.138624442828679,0 };
	const double r5[]{ 0.633087287046276,0.943902718565682,0.977733988780383,1.10859036971622,0.604308862509458,0.330269000063 };
	double r5_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double r5_ld[]{ 0.633087287046276,0,0.943902718565682,0,0.977733988780383,0,1.10859036971622,0,0.604308862509458,0,0.330269000063,0 };
	double r5_ld_before[]{ 0.505957051665142,0,0.699076722656686,0,0.890903252535799,0,0.959291425205444,0,0.547215529963803,0,0.138624442828679,0 };

	const double v1[]{ 0.1,0.23,0.45,0.67,0.89 };
	const double v2[]{ -0.1,0.89,-0.45,0.67,0.12 };
	const double v1_ld[]{ 0.1,0,0.23,0,0.45,0,0.67,0,0.89,0 };
	const double v2_ld[]{ -0.1,0,0,0.89,0,0,-0.45,0,0,0.67,0,0,0.12,0,0 };
	double vv_result{ 0.5479 };


	double result[36];

	std::copy(v, v + 6, result);
	s_nv(6, alpha, result);
	if (!s_is_equal(6, result, r1, error))std::cout << "\"s_nv\" failed" << std::endl;

	std::copy(v_ld, v_ld + 18, result);
	s_nv(6, alpha, result, 3);
	if (!s_is_equal(18, result, r1_ld, error))std::cout << "\"s_nv with ld\" failed" << std::endl;

	std::fill(result, result + 36, 1.0);
	s_vc(6, v, result);
	if (!s_is_equal(6, result, r2, error))std::cout << "\"s_vc\" failed" << std::endl;

	std::fill(result, result + 36, 0);
	s_vc(6, v_ld, 3, result, 2);
	if (!s_is_equal(12, result, r2_ld, error))std::cout << "\"s_vc with ld\" failed" << std::endl;

	std::fill(result, result + 36, 1.0);
	s_vc(6, alpha, v, result);
	if (!s_is_equal(6, result, r3, error))std::cout << "\"s_vc\" failed" << std::endl;

	std::fill(result, result + 36, 0);
	s_vc(6, alpha, v_ld, 3, result, 2);
	if (!s_is_equal(12, result, r3_ld, error))std::cout << "\"s_vc with ld\" failed" << std::endl;

	s_va(6, v, r4_before);
	if (!s_is_equal(6, r4_before, r4, error))std::cout << "\"s_va\" failed" << std::endl;

	s_va(6, v_ld, 3, r4_ld_before, 2);
	if (!s_is_equal(12, r4_ld_before, r4_ld, error))std::cout << "\"s_va with ld\" failed" << std::endl;

	s_va(6, alpha, v, r5_before);
	if (!s_is_equal(6, r5_before, r5, error))std::cout << "\"s_va\" failed" << std::endl;

	s_va(6, alpha, v_ld, 3, r5_ld_before, 2);
	if (!s_is_equal(12, r5_ld_before, r5_ld, error))std::cout << "\"s_va with ld\" failed" << std::endl;

	result[0] = s_vv(5, v1, v2);
	if (!s_is_equal(1, result, &vv_result, error))std::cout << "\"s_vv\" failed" << std::endl;

	result[0] = s_vv(5, v1_ld, 2, v2_ld, 3);
	if (!s_is_equal(1, result, &vv_result, error))std::cout << "\"s_vv with ld\" failed" << std::endl;


	const double m1[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double o1[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0.149298944510773,0.0570933325456545,0.191644557234321 };
	const double m2[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double o2[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0,0,0,0.149298944510773,0.0570933325456545,0.191644557234321,0,0,0 };
	
	const double m2_ld[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0 };
	const double m1T[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m2T_ld[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	
	const double m3[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double o3[]{ 1.00432110364729,1.65882068117277,1.23128897920193,1.54455917618522,0.77102746945494,0.889891502134332 };
	double o3_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m4[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0 };
	const double o4[]{ 1.00432110364729,1.65882068117277,1.23128897920193,0,1.54455917618522,0.77102746945494,0.889891502134332,0 };
	double o4_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };
	const double m5[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double o5[]{ 0.633087287046276,0.943902718565682,0.977733988780383,1.10859036971622,0.604308862509458,0.330269000063 };
	double o5_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m6[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0 };
	const double o6[]{ 0.633087287046276,0.943902718565682,0.977733988780383,0,1.10859036971622,0.604308862509458,0.330269000063,0 };
	double o6_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };
	
	const double m3T[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	double o3T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m4T[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	double o4T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };
	const double m5T[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	double o5T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m6T[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	double o6T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };
	
	const double m7a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m7b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o7[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m8a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m8b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o8[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m9a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m9b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o9[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m10a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m10b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o10[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };

	const double m11a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m11b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o11[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m12a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m12b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o12[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m13a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m13b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o13[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m14a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m14b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o14[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };

	const double m15a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m15b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o15[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m16a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m16b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o16[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m17a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m17b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o17[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m18a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m18b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o18[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };

	const double m19a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m19b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o19[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m20a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m20b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o20[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m21a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m21b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o21[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m22a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m22b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o22[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };


	std::copy(m1, m1 + 6, result);
	s_nm(2, 3, alpha, result);
	if (!s_is_equal(6, result, o1, error))std::cout << "\"s_nm\" failed" << std::endl;

	std::copy(m2, m2 + 12, result);
	s_nm(2, 3, alpha, result, 6);
	if (!s_is_equal(12, result, o2, error))std::cout << "\"s_nm with ld\" failed" << std::endl;

	s_mc(2, 3, m1, result);
	if (!s_is_equal(6, result, m1, error))std::cout << "\"s_mc\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mc(2, 3, m2_ld,5, result,6);
	if (!s_is_equal(12, result, m2, error))std::cout << "\"s_mc with ld\" failed" << std::endl;

	s_mc(2, 3, alpha, m1, result);
	if (!s_is_equal(6, result, o1, error))std::cout << "\"s_mc\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mc(2, 3, alpha, m2_ld, 5, result, 6);
	if (!s_is_equal(12, result, o2, error))std::cout << "\"s_mc with ld\" failed" << std::endl;

	s_mcT(2, 3, m1T, result);
	if (!s_is_equal(6, result, m1, error))std::cout << "\"s_mcT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mcT(2, 3, m2T_ld, 5, result, 6);
	if (!s_is_equal(12, result, m2, error))std::cout << "\"s_mcT with ld\" failed" << std::endl;

	s_mcT(2, 3, alpha, m1T, result);
	if (!s_is_equal(6, result, o1, error))std::cout << "\"s_mcT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mcT(2, 3, alpha, m2T_ld, 5, result, 6);
	if (!s_is_equal(12, result, o2, error))std::cout << "\"s_mcT with ld\" failed" << std::endl;

	s_ma(2, 3, m3, o3_before);
	if (!s_is_equal(6, o3, o3_before, error))std::cout << "\"s_ma\" failed" << std::endl;

	s_ma(2, 3, m4, 5, o4_before, 4);
	if (!s_is_equal(8, o4, o4_before, error))std::cout << "\"s_ma with ld\" failed" << std::endl;

	s_ma(2, 3, alpha, m5, o5_before);
	if (!s_is_equal(6, o5, o5_before, error))std::cout << "\"s_ma\" failed" << std::endl;

	s_ma(2, 3, alpha, m6, 5, o6_before, 4);
	if (!s_is_equal(8, o6, o6_before, error))std::cout << "\"s_ma with ld\" failed" << std::endl;

	s_maT(2, 3, m3T, o3T_before);
	if (!s_is_equal(6, o3, o3T_before, error))std::cout << "\"s_maT\" failed" << std::endl;

	s_maT(2, 3, m4T, 5, o4T_before, 4);
	if (!s_is_equal(8, o4, o4T_before, error))std::cout << "\"s_maT with ld\" failed" << std::endl;

	s_maT(2, 3, alpha, m5T, o5T_before);
	if (!s_is_equal(6, o5, o5T_before, error))std::cout << "\"s_maT\" failed" << std::endl;

	s_maT(2, 3, alpha, m6T, 5, o6T_before, 4);
	if (!s_is_equal(8, o6, o6T_before, error))std::cout << "\"s_maT with ld\" failed" << std::endl;

	s_mm(2, 4, 3, m7a, m7b, result);
	if (!s_is_equal(8, o7, result, error))std::cout << "\"s_mm\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, m8a, 6, m8b, 6, result, 5);
	if (!s_is_equal(10, o8, result, error))std::cout << "\"s_mm with ld\" failed" << std::endl;

	s_mm(2, 4, 3, alpha, m9a, m9b, result);
	if (!s_is_equal(8, o9, result, error))std::cout << "\"s_mm\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, alpha, m10a, 6, m10b, 6, result, 5);
	if (!s_is_equal(10, o10, result, error))std::cout << "\"s_mm with ld\" failed" << std::endl;

	s_mmTN(2, 4, 3, m11a, m11b, result);
	if (!s_is_equal(8, o11, result, error))std::cout << "\"s_mmTN\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mmTN(2, 4, 3, m12a, 5, m12b, 6, result, 5);
	if (!s_is_equal(10, o12, result, error))std::cout << "\"s_mmTN with ld\" failed" << std::endl;

	s_mmTN(2, 4, 3, alpha, m13a, m13b, result);
	if (!s_is_equal(8, o13, result, error))std::cout << "\"s_mmTN\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mmTN(2, 4, 3, alpha, m14a, 5, m14b, 6, result, 5);
	if (!s_is_equal(10, o14, result, error))std::cout << "\"s_mmTN with ld\" failed" << std::endl;

	s_mmNT(2, 4, 3, m15a, m15b, result);
	if (!s_is_equal(8, o15, result, error))std::cout << "\"s_mmNT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mmNT(2, 4, 3, m16a, 6, m16b, 5, result, 5);
	if (!s_is_equal(10, o16, result, error))std::cout << "\"s_mmNT with ld\" failed" << std::endl;

	s_mmNT(2, 4, 3, alpha, m17a, m17b, result);
	if (!s_is_equal(8, o17, result, error))std::cout << "\"s_mmNT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mmNT(2, 4, 3, alpha, m18a, 6, m18b, 5, result, 5);
	if (!s_is_equal(10, o18, result, error))std::cout << "\"s_mmNT with ld\" failed" << std::endl;

	s_mmTT(2, 4, 3, m19a, m19b, result);
	if (!s_is_equal(8, o19, result, error))std::cout << "\"s_mmTT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mmTT(2, 4, 3, m20a, 5, m20b, 5, result, 5);
	if (!s_is_equal(10, o20, result, error))std::cout << "\"s_mmTT with ld\" failed" << std::endl;

	s_mmTT(2, 4, 3, alpha, m21a, m21b, result);
	if (!s_is_equal(8, o21, result, error))std::cout << "\"s_mmTT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mmTT(2, 4, 3, alpha, m22a, 5, m22b, 5, result, 5);
	if (!s_is_equal(10, o22, result, error))std::cout << "\"s_mmTT with ld\" failed" << std::endl;

	const double ma01a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma01b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa01[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa01_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma02a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma02b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa02[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa02_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma03a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma03b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa03[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa03_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma04a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma04b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa04[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa04_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	const double ma05a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma05b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa05[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa05_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma06a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma06b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa06[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa06_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma07a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma07b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa07[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa07_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma08a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma08b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa08[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa08_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	const double ma09a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma09b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa09[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa09_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma10a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma10b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa10[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa10_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma11a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma11b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa11[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa11_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma12a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma12b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa12[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa12_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	const double ma13a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma13b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa13[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa13_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma14a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma14b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa14[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa14_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma15a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma15b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa15[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa15_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma16a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma16b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa16[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa16_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	s_mma(2, 4, 3, ma01a, ma01b, oa01_before);
	if (!s_is_equal(8, oa01_before, oa01, error))std::cout << "\"s_mma\" failed" << std::endl;

	s_mma(2, 4, 3, ma02a, 6, ma02b, 6, oa02_before, 5);
	if (!s_is_equal(10, oa02_before, oa02, error))std::cout << "\"s_mma with ld\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma03a, ma03b, oa03_before);
	if (!s_is_equal(8, oa03_before, oa03, error))std::cout << "\"s_mma\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma04a, 6, ma04b, 6, oa04_before, 5);
	if (!s_is_equal(10, oa04_before, oa04, error))std::cout << "\"s_mma with ld\" failed" << std::endl;

	s_mmaTN(2, 4, 3, ma05a, ma05b, oa05_before);
	if (!s_is_equal(8, oa05_before, oa05, error))std::cout << "\"s_mmaTN\" failed" << std::endl;

	s_mmaTN(2, 4, 3, ma06a, 5, ma06b, 6, oa06_before, 5);
	if (!s_is_equal(10, oa06_before, oa06, error))std::cout << "\"s_mmaTN with ld\" failed" << std::endl;

	s_mmaTN(2, 4, 3, alpha, ma07a, ma07b, oa07_before);
	if (!s_is_equal(8, oa07_before, oa07, error))std::cout << "\"s_mmaTN\" failed" << std::endl;

	s_mmaTN(2, 4, 3, alpha, ma08a, 5, ma08b, 6, oa08_before, 5);
	if (!s_is_equal(10, oa08_before, oa08, error))std::cout << "\"s_mmaTN with ld\" failed" << std::endl;

	s_mmaNT(2, 4, 3, ma09a, ma09b, oa09_before);
	if (!s_is_equal(8, oa09_before, oa09, error))std::cout << "\"s_mmaNT\" failed" << std::endl;

	s_mmaNT(2, 4, 3, ma10a, 6, ma10b, 5, oa10_before, 5);
	if (!s_is_equal(10, oa06_before, oa10, error))std::cout << "\"s_mmaNT with ld\" failed" << std::endl;

	s_mmaNT(2, 4, 3, alpha, ma11a, ma11b, oa11_before);
	if (!s_is_equal(8, oa11_before, oa11, error))std::cout << "\"s_mmaNT\" failed" << std::endl;

	s_mmaNT(2, 4, 3, alpha, ma12a, 6, ma12b, 5, oa12_before, 5);
	if (!s_is_equal(10, oa12_before, oa12, error))std::cout << "\"s_mmaNT with ld\" failed" << std::endl;

	s_mmaTT(2, 4, 3, ma13a, ma13b, oa13_before);
	if (!s_is_equal(8, oa13_before, oa13, error))std::cout << "\"s_mmaTT\" failed" << std::endl;

	s_mmaTT(2, 4, 3, ma14a, 5, ma14b, 5, oa14_before, 5);
	if (!s_is_equal(10, oa14_before, oa14, error))std::cout << "\"s_mmaTT with ld\" failed" << std::endl;

	s_mmaTT(2, 4, 3, alpha, ma15a, ma15b, oa15_before);
	if (!s_is_equal(8, oa15_before, oa15, error))std::cout << "\"s_mmaTT\" failed" << std::endl;

	s_mmaTT(2, 4, 3, alpha, ma16a, 5, ma16b, 5, oa16_before, 5);
	if (!s_is_equal(10, oa16_before, oa16, error))std::cout << "\"s_mmaTT with ld\" failed" << std::endl;
}
void test_pm_operation()
{
	const double pm[16] { -0.22, -0.975499782797526,   0.000416847668728071, 0.1,
		0.175499782797526, -0.04, -0.983666521865018, 0.2,
		0.959583152331272, -0.216333478134982,   0.18, 0.3,
		0,0,0,1 };
	const double pm2[16]{ 0.567219713641686,-0.802125918959455,0.186697098503681,0.1,
		0.77780532845257,0.447242474005492,-0.441580163137156,0.2,
		0.270704021926224,0.395686971707304,0.877582561890373,0.3,
		0,0,0,1 };
	const double pm3[16]{ 0.959630766969045,0.00981685903664117,0.281091480420624,0.11,
		0.224691174394048,0.574386230075444,-0.787143147622555,0.22,
		-0.169182349066996,0.818525557315332,0.548992936917952,-0.33,
		0,0,0,1 };
	const double pm_dot_pm2[16]{ -0.883424423624956,-0.259652292887403,0.390053809802222,-0.116974902258887,
		- 0.197847760298552,-0.547886650720495,-0.812820079542285,-0.0855499782797527,
		0.424755872811384,-0.79523638294572,0.432644824020405,0.406691619606131,
		0,0,0,1, };
	const double pm_dot_pm2_dot_pm3[16]{ -0.972093055630252,0.16145585737304,0.170197230633687, - 0.399992850527594,
		- 0.175451282517831, - 0.981954799994014, - 0.0705805797055172,0.0403823311778517,
		0.155730339556197, - 0.0984722137897536,0.982879079263088,0.135689969440591,
		0,0,0,1 };
	const double inv_pm[16]{ -0.22,0.175499782797526,0.959583152331272, -0.300974902258887,
		- 0.975499782797526, -0.04, -0.216333478134982,0.170450021720247,
		0.000416847668728071, -0.983666521865018,0.18,0.142691619606131,
		0,0,0,1 };
	const double inv_pm2[16]{ 0.567219713641686,0.77780532845257,0.270704021926224,- 0.29349424363255,
		- 0.802125918959455,0.447242474005492,0.395686971707304, - 0.127941994417344,
		0.186697098503681, - 0.441580163137156,0.877582561890373, - 0.193628445790049,
		0,0,0,1 };

	const double from_v1[]{ 0.45,0.65,0.13 };
	const double from_v1_ld[]{ 0.45,0,0.65,0,0.13,0 };
	const double to_v1[]{ -0.733020668621457,-0.0749017455835656,0.314595657761334 };
	const double to_v1_ld[]{ -0.733020668621457,0,0,-0.0749017455835656,0,0,0.314595657761334,0,0 };

	double result[36];

	s_inv_pm(pm, result);
	if (!s_is_equal(16, result, inv_pm, error))std::cout << "\"s_inv_pm\" failed" << std::endl;

	s_pm_dot_pm(pm, pm2, result);
	if (!s_is_equal(16, result, pm_dot_pm2, error))std::cout << "\"s_pm_dot_pm\" failed" << std::endl;

	s_pm_dot_pm(pm, pm2, pm3, result);
	if (!s_is_equal(16, result, pm_dot_pm2_dot_pm3, error))std::cout << "\"s_pm_dot_pm\" failed" << std::endl;

	s_inv_pm_dot_pm(inv_pm, pm2, result);
	if (!s_is_equal(16, result, pm_dot_pm2, error))std::cout << "\"s_pm_dot_pm\" failed" << std::endl;

	s_pm_dot_inv_pm(pm, inv_pm2, result);
	if (!s_is_equal(16, result, pm_dot_pm2, error))std::cout << "\"s_pm_dot_pm\" failed" << std::endl;

	s_pm_dot_v3(pm, from_v1, result);
	if (!s_is_equal(3, result, to_v1, error))std::cout << "\"s_pm_dot_v3\" failed" << std::endl;

	s_fill(16, 1, 0, result, 1);
	s_pm_dot_v3(pm, from_v1_ld, 2, result, 3);
	if (!s_is_equal(3, result, to_v1_ld, error))std::cout << "\"s_pm_dot_v3 with ld\" failed" << std::endl;

	s_inv_pm_dot_v3(inv_pm, from_v1, result);
	if (!s_is_equal(3, result, to_v1, error))std::cout << "\"s_pm_dot_v3\" failed" << std::endl;

	s_fill(16, 1, 0, result, 1);
	s_inv_pm_dot_v3(inv_pm, from_v1_ld, 2, result, 3);
	if (!s_is_equal(3, result, to_v1_ld, error))std::cout << "\"s_pm_dot_v3 with ld\" failed" << std::endl;
}
void test_cross()
{
	double result[36];
	
	const double cm3[9] = { 0,  -0.6, 0.25, 0.6, 0,  -0.12, -0.25, 0.12, 0 };
	
	const double a1[]{ 0.12, 0.25, 0.6 };
	const double b1[]{ 0.13, -0.21, 0.33 };
	const double r1[]{ 0.2085,0.0384,-0.0577 };
	double c1[]{0,0,0};

	const double a2[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b2[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r2[]{ 0.2085,0,0.0384,0,-0.0577,0 };
	double c2[]{ 0,0,0,0,0,0 };

	const double a3[]{ 0.12, 0.25, 0.6 };
	const double b3[]{ 0.13, -0.21, 0.33 };
	const double r3[]{ 0.052125,0.0096,-0.014425 };
	double c3[]{ 0.2085,0.0384,-0.0577 };

	const double a4[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b4[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r4[]{ 0.052125,0,0.0096,0,-0.014425,0 };
	double c4[]{ 0.2085,0,0.0384,0,-0.0577,0 };

	const double a5[]{ 0.12, 0.25, 0.6 };
	const double b5[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r5[]{ 0.2085,-0.045,0.0384,0.024,-0.0577,-0.001 };
	double c5[]{ 0,0,0,0,0,0 };

	const double a6[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b6[]{ 0.13, 0.1,0,0,-0.21, 0.2,0,0,0.33,0.3,0,0 };
	const double r6[]{ 0.2085,-0.045,0,0.0384,0.024,0,-0.0577,-0.001,0 };
	double c6[]{ 0,0,0,0,0,0,0,0,0 };

	const double a7[]{ 0.12, 0.25, 0.6 };
	const double b7[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r7[]{ 0.052125,-0.01125,0.0096,0.006,-0.014425,-0.00025 };
	double c7[]{ 0.2085,-0.045,0.0384,0.024,-0.0577,-0.001 };

	const double a8[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b8[]{ 0.13, 0.1,0,0,-0.21, 0.2,0,0,0.33,0.3,0,0 };
	const double r8[]{ 0.052125,-0.01125,0,0.0096,0.006,0,-0.014425,-0.00025,0 };
	double c8[]{ 0.2085,-0.045,0,0.0384,0.024,0,-0.0577,-0.001,0 };

	const double a9[]{ 0.12, 0.25, 0.6 };
	const double b9[]{ 0.13, -0.21, 0.33 };
	const double r9[]{ 0.3085,   0.2384,   0.2923 };
	double c9[]{ 0.1,0.2,0.35 };

	const double a10[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b10[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r10[]{ 0.3085,0,   0.2384,0,   0.2923,0 };
	double c10[]{ 0.1,0,0.2,0,0.35,0 };

	const double a11[]{ 0.12, 0.25, 0.6 };
	const double b11[]{ 0.13, -0.21, 0.33 };
	const double r11[]{ 0.152125,0.2096,0.335575 };
	double c11[]{ 0.1,0.2,0.35 };

	const double a12[]{ 0.12,0,0,0, 0.25,0,0,0, 0.6,0,0,0 };
	const double b12[]{ 0.13,0,0, -0.21,0,0, 0.33,0,0 };
	const double r12[]{ 0.152125,0,0.2096,0,0.335575,0 };
	double c12[]{ 0.1,0,0.2,0,0.35,0 };

	const double a13[]{ 0.12, 0.25, 0.6 };
	const double b13[]{ 0.13, 0.1,-0.21, 0.2,0.33,0.3 };
	const double r13[]{ 0.3085,   0.065,   0.2384,   0.244,   0.2923,   0.329 };
	double c13[]{ 0.1,0.11,0.2,0.22,0.35,0.33 };

	const double a14[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b14[]{ 0.13, 0.1,0,0,-0.21,0.2,0,0,0.33,0.3,0,0 };
	const double r14[]{ 0.3085,0.065,0,0.2384,0.244,0,0.2923,0.329,0 };
	double c14[]{ 0.1,0.11,0,0.2,0.22,0,0.35,0.33,0 };

	const double a15[]{ 0.12, 0.25, 0.6 };
	const double b15[]{ 0.13, 0.1,-0.21,0.2,0.33,0.3 };
	const double r15[]{ 0.152125,0.09875,0.2096,0.226,0.335575,0.32975 };
	double c15[]{ 0.1,0.11,0.2,0.22,0.35,0.33 };

	const double a16[]{ 0.12,0,0,0,0, 0.25,0,0,0,0, 0.6,0,0,0,0 };
	const double b16[]{ 0.13, 0.1,0,0,-0.21,0.2,0,0,0.33,0.3,0,0 };
	const double r16[]{ 0.152125,0.09875,0,0.2096,0.226,0,0.335575,0.32975,0 };
	double c16[]{ 0.1,0.11,0,0.2,0.22,0,0.35,0.33,0 };

	s_cm3(a1, result);
	if (!s_is_equal(9, result, cm3, error))std::cout << "\"s_cm3\" failed" << std::endl;

	s_c3(a1, b1, c1);
	if (!s_is_equal(3, c1, r1, error))std::cout << "\"s_c3\" failed" << std::endl;
	
	s_c3(a2,4, b2,3, c2,2);
	if (!s_is_equal(6, c2, r2, error))std::cout << "\"s_c3 with ld\" failed" << std::endl;

	s_c3(0.25, a3, b3, c3);
	if (!s_is_equal(3, c3, r3, error))std::cout << "\"s_c3\" failed" << std::endl;

	s_c3(0.25, a4, 4, b4, 3, c4, 2);
	if (!s_is_equal(6, c4, r4, error))std::cout << "\"s_c3 with ld\" failed" << std::endl;

	s_c3_n(2, a5, b5, c5);
	if (!s_is_equal(6, c5, r5, error))std::cout << "\"s_c3_n\" failed" << std::endl;

	s_c3_n(2, a6, 5, b6, 4, c6, 3);
	if (!s_is_equal(9, c6, r6, error))std::cout << "\"s_c3_n with ld\" failed" << std::endl;

	s_c3_n(2, 0.25, a7, b7, c7);
	if (!s_is_equal(6, c7, r7, error))std::cout << "\"s_c3_n\" failed" << std::endl;

	s_c3_n(2, 0.25, a8, 5, b8, 4, c8, 3);
	if (!s_is_equal(9, c8, r8, error))std::cout << "\"s_c3_n with ld\" failed" << std::endl;

	s_c3a(a9, b9, c9);
	if (!s_is_equal(3, c9, r9, error))std::cout << "\"s_c3a\" failed" << std::endl;

	s_c3a(a10, 4, b10, 3, c10, 2);
	if (!s_is_equal(6, c10, r10, error))std::cout << "\"s_c3a with ld\" failed" << std::endl;

	s_c3a(0.25, a11, b11, c11);
	if (!s_is_equal(3, c11, r11, error))std::cout << "\"s_c3a\" failed" << std::endl;

	s_c3a(0.25, a12, 4, b12, 3, c12, 2);
	if (!s_is_equal(6, c12, r12, error))std::cout << "\"s_c3a with ld\" failed" << std::endl;

	s_c3a_n(2, a13, b13, c13);
	if (!s_is_equal(6, c13, r13, error))std::cout << "\"s_c3a_n\" failed" << std::endl;

	s_c3a_n(2, a14, 5, b14, 4, c14, 3);
	if (!s_is_equal(9, c14, r14, error))std::cout << "\"s_c3a_n with ld\" failed" << std::endl;

	s_c3a_n(2, 0.25, a15, b15, c15);
	if (!s_is_equal(6, c15, r15, error))std::cout << "\"s_c3a_n\" failed" << std::endl;

	s_c3a_n(2, 0.25, a16, 5, b16, 4, c16, 3);
	if (!s_is_equal(9, c16, r16, error))std::cout << "\"s_c3a_n with ld\" failed" << std::endl;

	const double cmf[]{ 0,-0.63,0.52,0,0,0,0.63,0,-0.41,0,0,0,-0.52,0.41,0,0,0,0,0,-0.3,0.2,0,-0.63,0.52,0.3,0,-0.1,0.63,0,-0.41,-0.2,0.1,0,-0.52,0.41,0 };

	const double vs1[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f1[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf1[]{ 0.6083,0.308,-0.6501,-0.1144,-0.0154,0.2024 };
	double cf1[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs2[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f2[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf2[]{ 0.6083,0,0.308,0,-0.6501,0,-0.1144,0,-0.0154,0,0.2024,0 };
	double cf2[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs3[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f3[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf3[]{ 0.152075,0.077,-0.162525,-0.0286,-0.00385,0.0506 };
	double cf3[]{ 0.6083,0.308,-0.6501,-0.1144,-0.0154,0.2024 };

	const double vs4[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f4[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf4[]{ 0.152075,0,0.077,0,-0.162525,0,-0.0286,0,-0.00385,0,0.0506,0 };
	double cf4[]{ 0.6083,0,0.308,0,-0.6501,0,-0.1144,0,-0.0154,0,0.2024,0 };

	const double vs5[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f5[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf5[]{ 0.6083,0.03,0.308,-0.06,-0.6501,0.03,-0.1144,-0.003,-0.0154,0.006,0.2024,-0.003 };
	double cf5[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs6[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f6[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf6[]{ 0.6083,0.03,0,0.308,-0.06,0,-0.6501,0.03,0,-0.1144,-0.003,0,-0.0154,0.006,0,0.2024,-0.003,0 };
	double cf6[]{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	const double vs7[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f7[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf7[]{0.152075,0.0075,0.077,-0.015,-0.162525,0.0075,-0.0286,-0.00075,-0.00385,0.0015,0.0506,-0.00075};
	double cf7[]{ 0.6083,0.03,0.308,-0.06,-0.6501,0.03,-0.1144,-0.003,-0.0154,0.006,0.2024,-0.003 };

	const double vs8[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f8[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf8[]{ 0.152075,0.0075,0,0.077,-0.015,0,-0.162525,0.0075,0,-0.0286,-0.00075,0,-0.00385,0.0015,0,0.0506,-0.00075,0 };
	double cf8[]{ 0.6083,0.03,0,0.308,-0.06,0,-0.6501,0.03,0,-0.1144,-0.003,0,-0.0154,0.006,0,0.2024,-0.003,0 };

	const double vs9[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f9[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf9[]{ 0.9683,0.538,0.1999,1.0056,0.8746,-0.1376 };
	double cf9[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double vs10[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f10[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf10[]{ 0.9683,0,0.538,0,0.1999,0,1.0056,0,0.8746,0,-0.1376,0 };
	double cf10[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double vs11[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f11[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rf11[]{ 0.512075,0.307,0.687475,1.0914,0.88615,-0.2894 };
	double cf11[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double vs12[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double f12[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rf12[]{ 0.512075,0,0.307,0,0.687475,0,1.0914,0,0.88615,0,-0.2894,0 };
	double cf12[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double vs13[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f13[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf13[]{ 0.9683,0.155,0.538,0.175,0.1999,-0.345,1.0056,0.442,0.8746,0.581,-0.1376,-0.668 };
	double cf13[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double vs14[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f14[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf14[]{ 0.9683,0.155,0,0.538,0.175,0,0.1999,-0.345,0,1.0056,0.442,0,0.8746,0.581,0,-0.1376,-0.668,0 };
	double cf14[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	const double vs15[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double f15[]{ 0.99,0.1,-0.33,0.2,0.77,0.3,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rf15[]{ 0.512075,0.1325,0.307,0.22,0.687475,-0.3675,1.0914,0.44425,0.88615,0.5765,-0.2894,-0.66575 };
	double cf15[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double vs16[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double f16[]{ 0.99,0.1,0,0,-0.33,0.2,0,0,0.77,0.3,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rf16[]{ 0.512075,0.1325,0,0.307,0.22,0,0.687475,-0.3675,0,1.0914,0.44425,0,0.88615,0.5765,0,-0.2894,-0.66575,0 };
	double cf16[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	s_cmf(vs1, result);
	if (!s_is_equal(36, cmf, result, error))std::cout << "\"s_cmf\" failed" << std::endl;

	s_cf(vs1, f1, cf1);
	if (!s_is_equal(6, rf1, cf1, error))std::cout << "\"s_cf\" failed" << std::endl;

	s_cf(vs2,4, f2,3, cf2,2);
	if (!s_is_equal(12, rf2, cf2, error))std::cout << "\"s_cf with ld\" failed" << std::endl;

	s_cf(0.25, vs3, f3, cf3);
	if (!s_is_equal(6, rf3, cf3, error))std::cout << "\"s_cf\" failed" << std::endl;

	s_cf(0.25, vs4, 4, f4, 3, cf4, 2);
	if (!s_is_equal(12, rf4, cf4, error))std::cout << "\"s_cf with ld\" failed" << std::endl;

	s_cf_n(2, vs5, f5, cf5);
	if (!s_is_equal(12, rf5, cf5, error))std::cout << "\"s_cf_n\" failed" << std::endl;

	s_cf_n(2, vs6, 5, f6, 4, cf6,3);
	if (!s_is_equal(18, rf6, cf6, error))std::cout << "\"s_cf_n with ld\" failed" << std::endl;

	s_cf_n(2, 0.25, vs7, f7, cf7);
	if (!s_is_equal(12, rf7, cf7, error))std::cout << "\"s_cf_n\" failed" << std::endl;

	s_cf_n(2, 0.25, vs8, 5, f8, 4, cf8, 3);
	if (!s_is_equal(18, rf8, cf8, error))std::cout << "\"s_cf_n with ld\" failed" << std::endl;

	s_cfa(vs9, f9, cf9);
	if (!s_is_equal(6, rf9, cf9, error))std::cout << "\"s_cfa\" failed" << std::endl;

	s_cfa(vs10, 4, f10, 3, cf10,2);
	if (!s_is_equal(12, rf10, cf10, error))std::cout << "\"s_cfa with ld\" failed" << std::endl;

	s_cfa(0.25, vs11, f11, cf11);
	if (!s_is_equal(6, rf11, cf11, error))std::cout << "\"s_cfa\" failed" << std::endl;

	s_cfa(0.25, vs12, 4, f12, 3, cf12, 2);
	if (!s_is_equal(12, rf12, cf12, error))std::cout << "\"s_cfa with ld\" failed" << std::endl;

	s_cfa_n(2, vs13, f13, cf13);
	if (!s_is_equal(12, rf13, cf13, error))std::cout << "\"s_cfa_n\" failed" << std::endl;

	s_cfa_n(2, vs14, 5, f14, 4, cf14, 3);
	if (!s_is_equal(18, rf14, cf14, error))std::cout << "\"s_cfa_n with ld\" failed" << std::endl;

	s_cfa_n(2, 0.25, vs15, f15, cf15);
	if (!s_is_equal(12, rf15, cf15, error))std::cout << "\"s_cfa_n\" failed" << std::endl;

	s_cfa_n(2, 0.25, vs16, 5, f16, 4, cf16, 3);
	if (!s_is_equal(18, rf16, cf16, error))std::cout << "\"s_cfa_n with ld\" failed" << std::endl;

	const double cmv[]{ 0,-0.63,0.52,0,-0.3,0.2,0.63,0,-0.41,0.3,0,-0.1,-0.52,0.41,0,-0.2,0.1,0,0,0,0,0,-0.63,0.52,	0,0,0,0.63,0,-0.41,0,0,0,-0.52,0.41,0 };

	const double v1[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w1[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv1[]{ 0.4543,0.154,-0.4961,-0.3674,-0.2354,0.4334 };
	double cv1[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v2[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w2[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv2[]{ 0.4543,0,0.154,0,-0.4961,0,-0.3674,0,-0.2354,0,0.4334,0 };
	double cv2[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v3[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w3[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv3[]{ 0.113575,0.0385,-0.124025,-0.09185,-0.05885,0.10835 };
	double cv3[]{ 0.6083,0.308,-0.6501,-0.1144,-0.0154,0.2024 };

	const double v4[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w4[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv4[]{ 0.113575,0,0.0385,0,-0.124025,0,-0.09185,0,-0.05885,0,0.10835,0 };
	double cv4[]{ 0.6083,0,0.308,0,-0.6501,0,-0.1144,0,-0.0154,0,0.2024,0 };

	const double v5[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w5[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv5[]{ 0.4543,-0.3287,0.154,0.2857,-0.4961,-0.0219,-0.3674,-0.003,-0.2354,0.006,0.4334,-0.003 };
	double cv5[]{ 0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v6[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w6[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv6[]{ 0.4543,-0.3287,0,0.154,0.2857,0,-0.4961,-0.0219,0,-0.3674,-0.003,0,-0.2354,0.006,0,0.4334,-0.003,0 };
	double cv6[]{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

	const double v7[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w7[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv7[]{ 0.113575,-0.082175,0.0385,0.071425,-0.124025,-0.005475,-0.09185,-0.00075,-0.05885,0.0015,0.10835,-0.00075 };
	double cv7[]{ 0.6083,0.03,0.308,-0.06,-0.6501,0.03,-0.1144,-0.003,-0.0154,0.006,0.2024,-0.003 };

	const double v8[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w8[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv8[]{ 0.113575,-0.082175,0,0.0385,0.071425,0,-0.124025,-0.005475,0,-0.09185,-0.00075,0,-0.05885,0.0015,0,0.10835,-0.00075,0 };
	double cv8[]{ 0.6083,0.03,0,0.308,-0.06,0,-0.6501,0.03,0,-0.1144,-0.003,0,-0.0154,0.006,0,0.2024,-0.003,0 };

	const double v9[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w9[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv9[]{ 0.8143,0.384,0.3539,0.7526,0.6546,0.0934 };
	double cv9[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double v10[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w10[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv10[]{ 0.8143,0,0.384,0,0.3539,0,0.7526,0,0.6546,0,0.0934,0 };
	double cv10[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double v11[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w11[]{ 0.99,-0.33,0.77,-0.66,0.22,-0.44 };
	const double rv11[]{ 0.473575,0.2685,0.725975,1.02815,0.83115,-0.23165 };
	double cv11[]{ 0.36,0.23,0.85,1.12,0.89,-0.34 };

	const double v12[]{ 0.1,0,0,0,0.2,0,0,0,0.3,0,0,0,0.41,0,0,0,0.52,0,0,0,0.63,0,0,0 };
	const double w12[]{ 0.99,0,0,-0.33,0,0,0.77,0,0,-0.66,0,0,0.22,0,0,-0.44,0,0 };
	const double rv12[]{ 0.473575,0,0.2685,0,0.725975,0,1.02815,0,0.83115,0,-0.23165,0 };
	double cv12[]{ 0.36,0,0.23,0,0.85,0,1.12,0,0.89,0,-0.34,0 };

	const double v13[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w13[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv13[]{ 0.8143,-0.2037,0.384,0.5207,0.3539,-0.3969,0.7526,0.442,0.6546,0.581,0.0934,-0.668 };
	double cv13[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double v14[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w14[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv14[]{ 0.8143,-0.2037,0,0.384,0.5207,0,0.3539,-0.3969,0,0.7526,0.442,0,0.6546,0.581,0,0.0934,-0.668,0 };
	double cv14[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };

	const double v15[]{ 0.1,0.2,0.3,0.41,0.52,0.63 };
	const double w15[]{ 0.99,0.15,-0.33,0.21,0.77,-0.32,-0.66,0.4,0.22,0.5,-0.44,0.6 };
	const double rv15[]{ 0.473575,0.042825,0.2685,0.306425,0.725975,-0.380475,1.02815,0.44425,0.83115,0.5765,-0.23165,-0.66575 };
	double cv15[]{ 0.36,0.125,0.23,0.235,0.85,-0.375,1.12,0.445,0.89,0.575,-0.34,-0.665 };

	const double v16[]{ 0.1,0,0,0,0,0.2,0,0,0,0,0.3,0,0,0,0,0.41,0,0,0,0,0.52,0,0,0,0,0.63,0,0,0,0 };
	const double w16[]{ 0.99,0.15,0,0,-0.33,0.21,0,0,0.77,-0.32,0,0,-0.66,0.4,0,0,0.22,0.5,0,0,-0.44,0.6,0,0 };
	const double rv16[]{ 0.473575,0.042825,0,0.2685,0.306425,0,0.725975,-0.380475,0,1.02815,0.44425,0,0.83115,0.5765,0,-0.23165,-0.66575,0 };
	double cv16[]{ 0.36,0.125,0,0.23,0.235,0,0.85,-0.375,0,1.12,0.445,0,0.89,0.575,0,-0.34,-0.665,0 };
	
	s_cmv(v1, result);
	if (!s_is_equal(36, cmv, result, error))std::cout << "\"s_cmv\" failed" << std::endl;

	s_cv(v1, w1, cv1);
	if (!s_is_equal(6, rv1, cv1, error))std::cout << "\"s_cv\" vailed" << std::endl;

	s_cv(v2, 4, w2, 3, cv2, 2);
	if (!s_is_equal(12, rv2, cv2, error))std::cout << "\"s_cv with ld\" vailed" << std::endl;

	s_cv(0.25, v3, w3, cv3);
	if (!s_is_equal(6, rv3, cv3, error))std::cout << "\"s_cv\" vailed" << std::endl;

	s_cv(0.25, v4, 4, w4, 3, cv4, 2);
	if (!s_is_equal(12, rv4, cv4, error))std::cout << "\"s_cv with ld\" vailed" << std::endl;

	s_cv_n(2, v5, w5, cv5);
	if (!s_is_equal(12, rv5, cv5, error))std::cout << "\"s_cv_n\" vailed" << std::endl;

	s_cv_n(2, v6, 5, w6, 4, cv6, 3);
	if (!s_is_equal(18, rv6, cv6, error))std::cout << "\"s_cv_n with ld\" vailed" << std::endl;

	s_cv_n(2, 0.25, v7, w7, cv7);
	if (!s_is_equal(12, rv7, cv7, error))std::cout << "\"s_cv_n\" vailed" << std::endl;

	s_cv_n(2, 0.25, v8, 5, w8, 4, cv8, 3);
	if (!s_is_equal(18, rv8, cv8, error))std::cout << "\"s_cv_n with ld\" vailed" << std::endl;

	s_cva(v9, w9, cv9);
	if (!s_is_equal(6, rv9, cv9, error))std::cout << "\"s_cva\" vailed" << std::endl;

	s_cva(v10, 4, w10, 3, cv10, 2);
	if (!s_is_equal(12, rv10, cv10, error))std::cout << "\"s_cva with ld\" vailed" << std::endl;

	s_cva(0.25, v11, w11, cv11);
	if (!s_is_equal(6, rv11, cv11, error))std::cout << "\"s_cva\" vailed" << std::endl;

	s_cva(0.25, v12, 4, w12, 3, cv12, 2);
	if (!s_is_equal(12, rv12, cv12, error))std::cout << "\"s_cva with ld\" vailed" << std::endl;

	s_cva_n(2, v13, w13, cv13);
	if (!s_is_equal(12, rv13, cv13, error))std::cout << "\"s_cva_n\" vailed" << std::endl;

	s_cva_n(2, v14, 5, w14, 4, cv14, 3);
	if (!s_is_equal(18, rv14, cv14, error))std::cout << "\"s_cva_n with ld\" vailed" << std::endl;

	s_cva_n(2, 0.25, v15, w15, cv15);
	if (!s_is_equal(12, rv15, cv15, error))std::cout << "\"s_cva_n\" vailed" << std::endl;

	s_cva_n(2, 0.25, v16, 5, w16, 4, cv16, 3);
	if (!s_is_equal(18, rv16, cv16, error))std::cout << "\"s_cva_n with ld\" vailed" << std::endl;
}
void test_transform()
{
	double result[36];
	
	const double pm[16] = { -0.22, -0.975499782797526,   0.000416847668728071, 0.1,
		0.175499782797526, -0.04, -0.983666521865018, 0.2,
		0.959583152331272, -0.216333478134982,   0.18, 0.3,
		0,0,0,1 };
	const double inv_pm[16]{ -0.22,0.175499782797526,0.959583152331272, - 0.300974902258887,
		- 0.975499782797526,-0.04,-0.216333478134982,0.170450021720247,
		0.000416847668728071,-0.983666521865018,0.18,0.142691619606131,
		0,0,0,1 };
	const double tmf[36]{ -0.22, - 0.975499782797526,0.000416847668728071,0,0,0,
		0.175499782797526, - 0.04, - 0.983666521865018,0,0,0,
		0.959583152331272, - 0.216333478134982,0.18,0,0,0,
		0.139266695626997, - 0.0312666956269964,0.331099956559505, - 0.22, - 0.975499782797526,0.000416847668728071,
		- 0.161958315233127, - 0.27101658702576, - 0.0178749456993816,0.175499782797526, - 0.04, - 0.983666521865018,
		0.0615499782797526,0.191099956559505, - 0.0984500217202474,0.959583152331272, - 0.216333478134982,0.18, };
	const double tmv[36]{ -0.22, - 0.975499782797526,0.000416847668728071,0.139266695626997, - 0.0312666956269964,0.331099956559505,
		0.175499782797526, - 0.04, - 0.983666521865018, - 0.161958315233127, - 0.27101658702576, - 0.0178749456993816,
		0.959583152331272, - 0.216333478134982,0.18,0.0615499782797526,0.191099956559505, - 0.0984500217202474,
		0,0,0, - 0.22, - 0.975499782797526,0.000416847668728071,
		0,0,0,0.175499782797526, - 0.04, - 0.983666521865018,
		0,0,0,0.959583152331272, - 0.216333478134982,0.18, };

	const double fs_from[]{0.685,0.747,-0.321,0.985,-0.444,0.333};
	const double fs_to[]{ -0.879532145851414,0.406094304734976,0.43793335118009,0.182319092651313,-0.444586644598921,1.31769732898202 };
	const double fs_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double fs_ld_to[]{ -0.879532145851414,0,0.406094304734976,0,0.43793335118009,0,0.182319092651313,0,-0.444586644598921,0,1.31769732898202,0 };
	const double fs_alpha_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double fs_alpha_to[]{ -0.219883036462854,0.101523576183744,0.109483337795023,0.0455797731628282,-0.11114666114973,0.329424332245505 };
	const double fs_alpha_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double fs_alpha_ld_to[]{ -0.219883036462854,0,0.101523576183744,0,0.109483337795023,0,0.0455797731628282,0,-0.11114666114973,0,0.329424332245505,0 };
	const double fsn_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double fsn_to[]{ -0.879532145851414,-0.0516518158847347,0.406094304734976,-0.101711308789486,0.43793335118009,0.866508453265252,
		0.182319092651313,0.334465692072119, - 0.444586644598921, - 0.412286721832461,1.31769732898202,0.33277521665942 };
	const double fsn_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double fsn_ld_to[]{ -0.879532145851414,-0.0516518158847347,0,0.406094304734976,-0.101711308789486,0,0.43793335118009,0.866508453265252,0,
		0.182319092651313,0.334465692072119,0,-0.444586644598921, -0.412286721832461,0,1.31769732898202,0.33277521665942,0 };
	const double fsn_alpha_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double fsn_alpha_to[]{ -0.219883036462854, - 0.0129129539711837,0.101523576183744, - 0.0254278271973715,0.109483337795023,0.216627113316313,
		0.0455797731628282,0.0836164230180298, - 0.11114666114973, - 0.103071680458115,0.329424332245505,0.083193804164855 };
	const double fsn_alpha_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double fsn_alpha_ld_to[]{ -0.219883036462854, -0.0129129539711837,0,0.101523576183744, -0.0254278271973715,0,0.109483337795023,0.216627113316313,0,
		0.0455797731628282,0.0836164230180298,0, -0.11114666114973,-0.103071680458115,0,0.329424332245505,0.083193804164855,0 };
	
	const double fsa_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double fsa_to[]{ -0.979532145851414,0.206094304734976,0.13793335118009,-0.217680907348687,-0.944586644598921,0.71769732898202 };
	double fsa_from_original[]{ 0.300974902258887,-0.170450021720247,-0.142691619606131,0.575499782797526,-0.54,-0.383666521865018 };
	double fsa_to_original[]{ -0.1,-0.2,-0.3,-0.4,-0.5,-0.6 };
	const double fsa_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double fsa_ld_to[]{ -0.979532145851414,0,0.206094304734976,0,0.13793335118009,0,-0.217680907348687,0,-0.944586644598921,0,0.71769732898202,0 };
	double fsa_ld_from_original[]{ 0.300974902258887,0,0,-0.170450021720247,0,0,-0.142691619606131,0,0,0.575499782797526,0,0,-0.54,0,0,-0.383666521865018,0,0 };
	double fsa_ld_to_original[]{ -0.1,0,-0.2,0,-0.3,0,-0.4,0,-0.5,0,-0.6,0 };
	const double fsa_alpha_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double fsa_alpha_to[]{ -0.319883036462854,-0.098476423816256,-0.190516662204977,-0.354420226837172,-0.61114666114973,-0.270575667754495 };
	double fsa_alpha_from_original[]{ 1.20389960903555,-0.681800086880989,-0.570766478424523,2.3019991311901,-2.16,-1.53466608746007 };
	double fsa_alpha_to_original[]{ -0.1,-0.2,-0.3,-0.4,-0.5,-0.6 };
	const double fsa_alpha_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double fsa_alpha_ld_to[]{ -0.319883036462854,0,-0.098476423816256,0,-0.190516662204977,0,-0.354420226837172,0,-0.61114666114973,0,-0.270575667754495,0 };
	double fsa_alpha_ld_from_original[]{ 1.20389960903555,0,0,-0.681800086880989,0,0,-0.570766478424523,0,0,2.3019991311901,0,0,-2.16,0,0,-1.53466608746007,0,0 };
	double fsa_alpha_ld_to_original[]{ -0.1,0,-0.2,0,-0.3,0,-0.4,0,-0.5,0,-0.6,0 };
	const double fsan_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double fsan_to[]{ -0.979532145851414,0.0583481841152653,0.206094304734976,0.018288691210514,0.13793335118009,0.996508453265252,
		- 0.21768090734868,0.474465692072119, - 0.944586644598921, - 0.262286721832461,0.71769732898202,0.49277521665942 };
	double fsan_from_original[]{ 0.300974902258887, - 0.121605783738768, - 0.170450021720247,0.140228328265276, - 0.142691619606131,0.0945941293802421,
		0.575499782797526, - 0.152944107659995, - 0.54,0.188301658702576, - 0.383666521865018,0.0972141206921431 };
	double fsan_to_original[]{ -0.1,0.11,-0.2,0.12,-0.3,0.13,-0.4,0.14,-0.5,0.15,-0.6,0.16 };
	const double fsan_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double fsan_ld_to[]{ -0.979532145851414,0.0583481841152653,0,0.206094304734976,0.018288691210514,0,0.13793335118009,0.996508453265252,0,
		-0.21768090734868,0.474465692072119,0,-0.944586644598921,-0.262286721832461,0,0.71769732898202,0.49277521665942,0 };
	double fsan_ld_from_original[]{ 0.300974902258887, -0.121605783738768,0,0, -0.170450021720247,0.140228328265276,0,0, -0.142691619606131,0.0945941293802421,0,0,
		0.575499782797526, -0.152944107659995,0,0, -0.54,0.188301658702576,0,0, -0.383666521865018,0.0972141206921431,0,0 };
	double fsan_ld_to_original[]{ -0.1,0.11,0,-0.2,0.12,0,-0.3,0.13,0,-0.4,0.14,0,-0.5,0.15,0,-0.6,0.16,0 };
	const double fsan_alpha_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double fsan_alpha_to[]{ -0.319883036462854,0.0970870460288163,-0.098476423816256,0.0945721728026285,-0.190516662204977,0.346627113316313,
		-0.354420226837172,0.22361642301803,-0.61114666114973,0.046928319541885,-0.270575667754495,0.243193804164855 };
	double fsan_alpha_from_original[]{ 1.20389960903555, - 0.486423134955074, - 0.681800086880989,0.560913313061102, - 0.570766478424523,0.378376517520968,
		2.3019991311901, - 0.611776430639978, - 2.16,0.753206634810303, - 1.53466608746007,0.388856482768572 };
	double fsan_alpha_to_original[]{ -0.1,0.11,-0.2,0.12,-0.3,0.13,-0.4,0.14,-0.5,0.15,-0.6,0.16 };
	const double fsan_alpha_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double fsan_alpha_ld_to[]{ -0.319883036462854,0.0970870460288163,0,-0.098476423816256,0.0945721728026285,0,-0.190516662204977,0.346627113316313,0,
		-0.354420226837172,0.22361642301803,0,-0.61114666114973,0.046928319541885,0,-0.270575667754495,0.243193804164855,0 };
	double fsan_alpha_ld_from_original[]{ 1.20389960903555, -0.486423134955074,0,0, -0.681800086880989,0.560913313061102,0,0, -0.570766478424523,0.378376517520968,0,0,
		2.3019991311901, -0.611776430639978,0,0, -2.16,0.753206634810303,0,0, -1.53466608746007,0.388856482768572,0,0 };
	double fsan_alpha_ld_to_original[]{ -0.1,0.11,0,-0.2,0.12,0,-0.3,0.13,0,-0.4,0.14,0,-0.5,0.15,0,-0.6,0.16,0 };

	s_tmf(pm, result);
	if (!s_is_equal(36, result, tmf, error))std::cout << "\"s_tmf\" failed" << std::endl;

	s_tf(pm, fs_from, result);
	if (!s_is_equal(6, result, fs_to, error))std::cout << "\"s_tf\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tf(pm, fs_ld_from, 3, result, 2);
	if (!s_is_equal(12, result, fs_ld_to, error))std::cout << "\"s_tf with ld\" failed" << std::endl;

	s_tf(0.25, pm, fs_alpha_from, result);
	if (!s_is_equal(6, result, fs_alpha_to, error))std::cout << "\"s_tf\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tf(0.25, pm, fs_alpha_ld_from, 3, result, 2);
	if (!s_is_equal(12, result, fs_alpha_ld_to, error))std::cout << "\"s_tf with ld\" failed" << std::endl;

	s_tf_n(2, pm, fsn_from, result);
	if (!s_is_equal(12, result, fsn_to, error))std::cout << "\"s_tf_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tf_n(2, pm, fsn_ld_from, 4, result, 3);
	if (!s_is_equal(18, result, fsn_ld_to, error))std::cout << "\"s_tf_n with ld\" failed" << std::endl;

	s_tf_n(2, 0.25, pm, fsn_alpha_from, result);
	if (!s_is_equal(12, result, fsn_alpha_to, error))std::cout << "\"s_tf_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tf_n(2, 0.25, pm, fsn_alpha_ld_from, 4, result, 3);
	if (!s_is_equal(18, result, fsn_alpha_ld_to, error))std::cout << "\"s_tf_n with ld\" failed" << std::endl;

	s_tfa(pm, fsa_from, fsa_to_original);
	if (!s_is_equal(6, fsa_to_original, fsa_to, error))std::cout << "\"s_tfa\" failed" << std::endl;

	s_tfa(pm, fsa_ld_from, 3, fsa_ld_to_original, 2);
	if (!s_is_equal(12, fsa_ld_to_original, fsa_ld_to, error))std::cout << "\"s_tfa with ld\" failed" << std::endl;

	s_tfa(0.25, pm, fsa_alpha_from, fsa_alpha_to_original);
	if (!s_is_equal(6, fsa_alpha_to_original, fsa_alpha_to, error))std::cout << "\"s_tfa\" failed" << std::endl;

	s_tfa(0.25, pm, fsa_alpha_ld_from, 3, fsa_alpha_ld_to_original, 2);
	if (!s_is_equal(12, fsa_alpha_ld_to_original, fsa_alpha_ld_to, error))std::cout << "\"s_tfa with ld\" failed" << std::endl;

	s_tfa_n(2, pm, fsan_from, fsan_to_original);
	if (!s_is_equal(12, fsan_to_original, fsan_to, error))std::cout << "\"s_tfa_n\" failed" << std::endl;

	s_tfa_n(2, pm, fsan_ld_from, 4, fsan_ld_to_original, 3);
	if (!s_is_equal(18, fsan_ld_to_original, fsan_ld_to, error))std::cout << "\"s_tfa_n with ld\" failed" << std::endl;

	s_tfa_n(2, 0.25, pm, fsan_alpha_from, fsan_alpha_to_original);
	if (!s_is_equal(12, fsan_alpha_to_original, fsan_alpha_to, error))std::cout << "\"s_tfa_n\" failed" << std::endl;

	s_tfa_n(2, 0.25, pm, fsan_alpha_ld_from, 4, fsan_alpha_ld_to_original, 3);
	if (!s_is_equal(18, fsan_alpha_ld_to_original, fsan_alpha_ld_to, error))std::cout << "\"s_tfa_n with ld\" failed" << std::endl;

	s_inv_tf(pm, fs_to, result);
	if (!s_is_equal(6, result, fs_from, error))std::cout << "\"s_inv_tf\" failed" << std::endl;

	std::fill_n(result, 18, 0);
	s_inv_tf(pm, fs_ld_to, 2, result, 3);
	if (!s_is_equal(18, result, fs_ld_from, error))std::cout << "\"s_inv_tf with ld\" failed" << std::endl;

	s_inv_tf(4.0, pm, fs_alpha_to, result);
	if (!s_is_equal(6, result, fs_alpha_from, error))std::cout << "\"s_inv_tf\" failed" << std::endl;

	std::fill_n(result, 18, 0);
	s_inv_tf(4.0, pm, fs_alpha_ld_to, 2, result, 3);
	if (!s_is_equal(18, result, fs_alpha_ld_from, error))std::cout << "\"s_inv_tf with ld\" failed" << std::endl;

	s_inv_tf_n(2, pm, fsn_to, result);
	if (!s_is_equal(12, result, fsn_from, error))std::cout << "\"s_tf_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_inv_tf_n(2, pm, fsn_ld_to, 3, result, 4);
	if (!s_is_equal(24, result, fsn_ld_from, error))std::cout << "\"s_tf_n with ld\" failed" << std::endl;

	s_inv_tf_n(2, 4.0, pm, fsn_alpha_to, result);
	if (!s_is_equal(12, result, fsn_alpha_from, error))std::cout << "\"s_tf_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_inv_tf_n(2, 4.0, pm, fsn_alpha_ld_to, 3, result, 4);
	if (!s_is_equal(24, result, fsn_alpha_ld_from, error))std::cout << "\"s_tf_n with ld\" failed" << std::endl;

	s_inv_tfa(pm, fsa_to, fsa_from_original);
	if (!s_is_equal(6, fsa_from_original, fsa_from, error))std::cout << "\"s_inv_tfa\" failed" << std::endl;

	s_inv_tfa(pm, fsa_ld_to, 2, fsa_ld_from_original, 3);
	if (!s_is_equal(18, fsa_ld_from_original, fsa_ld_from, error))std::cout << "\"s_inv_tfa with ld\" failed" << std::endl;

	s_inv_tfa(4.0, pm, fsa_alpha_to, fsa_alpha_from_original);
	if (!s_is_equal(6, fsa_alpha_from_original, fsa_alpha_from, error))std::cout << "\"s_inv_tfa\" failed" << std::endl;

	s_inv_tfa(4.0, pm, fsa_alpha_ld_to, 2, fsa_alpha_ld_from_original, 3);
	if (!s_is_equal(18, fsa_alpha_ld_from_original, fsa_alpha_ld_from, error))std::cout << "\"s_inv_tfa with ld\" failed" << std::endl;

	s_inv_tfa_n(2, pm, fsan_to, fsan_from_original);
	if (!s_is_equal(12, fsan_from_original, fsan_from, error))std::cout << "\"s_inv_tfa\" failed" << std::endl;

	s_inv_tfa_n(2, pm, fsan_ld_to, 3, fsan_ld_from_original, 4);
	if (!s_is_equal(24, fsan_ld_from_original, fsan_ld_from, error))std::cout << "\"s_inv_tfa with ld\" failed" << std::endl;

	s_inv_tfa_n(2, 4.0, pm, fsan_alpha_to, fsan_alpha_from_original);
	if (!s_is_equal(12, fsan_alpha_from_original, fsan_alpha_from, error))std::cout << "\"s_inv_tfa\" failed" << std::endl;

	s_inv_tfa_n(2, 4.0, pm, fsan_alpha_ld_to, 3, fsan_alpha_ld_from_original, 4);
	if (!s_is_equal(24, fsan_alpha_ld_from_original, fsan_alpha_ld_from, error))std::cout << "\"s_inv_tfa with ld\" failed" << std::endl;

	const double vs_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double vs_to[]{ -0.61821575226612,0.360944371951889,0.380927841840383,0.216560713835788, - 0.136933665725488,1.10118146933823 };
	const double vs_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double vs_ld_to[]{ -0.61821575226612,0,0.360944371951889,0,0.380927841840383,0,0.216560713835788,0,-0.136933665725488,0,1.10118146933823,0 };
	const double vs_alpha_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double vs_alpha_to[]{ -0.15455393806653,0.0902360929879723,0.0952319604600957,0.054140178458947, - 0.034233416431372,0.275295367334558 };
	const double vs_alpha_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double vs_alpha_ld_to[]{ -0.15455393806653,0,0.0902360929879723,0,0.0952319604600957,0,0.054140178458947,0, -0.034233416431372,0,0.275295367334558,0 };
	const double vsn_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double vsn_to[]{ -0.61821575226612,0.107913480509704,0.360944371951889, - 0.0957777245909609,0.380927841840383,0.809364298334756,
		0.216560713835788,0.130650608782223, - 0.136933665725488, - 0.310140331740515,1.10118146933823,0.332615984361422 };
	const double vsn_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double vsn_ld_to[]{ -0.61821575226612,0.107913480509704,0,0.360944371951889, -0.0957777245909609,0,0.380927841840383,0.809364298334756,0,
		0.216560713835788,0.130650608782223,0, -0.136933665725488, -0.310140331740515,0,1.10118146933823,0.332615984361422,0 };
	const double vsn_alpha_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double vsn_alpha_to[]{ -0.15455393806653,0.026978370127426,0.0902360929879723, - 0.0239444311477402,0.0952319604600957,0.202341074583689,
		0.054140178458947,0.0326626521955558, - 0.034233416431372, - 0.0775350829351287,0.275295367334558,0.0831539960903555 };
	const double vsn_alpha_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double vsn_alpha_ld_to[]{ -0.15455393806653,0.026978370127426,0,0.0902360929879723, -0.0239444311477402,0,0.0952319604600957,0.202341074583689,0,
		0.054140178458947,0.0326626521955558,0, -0.034233416431372, -0.0775350829351287,0,0.275295367334558,0.0831539960903555,0 };

	const double vsa_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double vsa_to[]{ -0.71821575226612,0.160944371951889,0.080927841840383,-0.183439286164212,-0.636933665725488,0.50118146933823 };
	double vsa_from_original[]{ 0.312632409860973,-0.203805019548222,-0.0782591228641679,0.575499782797526,-0.54,-0.383666521865018 };
	double vsa_to_original[]{ -0.1,-0.2,-0.3,-0.4,-0.5,-0.6 };
	const double vsa_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double vsa_ld_to[]{ -0.71821575226612,0,0.160944371951889,0,0.080927841840383,0,-0.183439286164212,0,-0.636933665725488,0,0.50118146933823,0 };
	double vsa_ld_from_original[]{ 0.312632409860973,0,0,-0.203805019548222,0,0,-0.0782591228641679,0,0,0.575499782797526,0,0,-0.54,0,0,-0.383666521865018,0,0 };
	double vsa_ld_to_original[]{ -0.1,0,-0.2,0,-0.3,0,-0.4,0,-0.5,0,-0.6,0 };
	const double vsa_alpha_from[]{ 0.685,0.747,-0.321,0.985,-0.444,0.333 };
	const double vsa_alpha_to[]{ -0.25455393806653,-0.109763907012028,-0.204768039539904,-0.345859821541053,-0.534233416431372,-0.324704632665443 };
	double vsa_alpha_from_original[]{ 1.25052963944389, - 0.81522007819289, - 0.313036491456672,2.3019991311901, - 2.16, - 1.53466608746007 };
	double vsa_alpha_to_original[]{ -0.1,-0.2,-0.3,-0.4,-0.5,-0.6 };
	const double vsa_alpha_ld_from[]{ 0.685,0,0,0.747,0,0,-0.321,0,0,0.985,0,0,-0.444,0,0,0.333,0,0 };
	const double vsa_alpha_ld_to[]{ -0.25455393806653,0,-0.109763907012028,0,-0.204768039539904,0,-0.345859821541053,0,-0.534233416431372,0,-0.324704632665443,0 };
	double vsa_alpha_ld_from_original[]{ 1.25052963944389,0,0,-0.81522007819289,0,0,-0.313036491456672,0,0,2.3019991311901,0,0,-2.16,0,0,-1.53466608746007,0,0 };
	double vsa_alpha_ld_to_original[]{ -0.1,0,-0.2,0,-0.3,0,-0.4,0,-0.5,0,-0.6,0 };
	const double vsan_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double vsan_to[]{ -0.71821575226612,0.217913480509704,0.160944371951889,0.0242222754090391,0.080927841840383,0.939364298334756,
		- 0.183439286164212,0.270650608782223, - 0.636933665725488, - 0.160140331740515,0.50118146933823,0.492615984361422 };
	double vsan_from_original[]{ 0.312632409860973, - 0.126657370366339, - 0.203805019548222,0.154682160657398, - 0.0782591228641679,0.0666733807920581,
		0.575499782797526, - 0.149058271792632, - 0.54,0.177183326093251, - 0.383666521865018,0.118691619606131 };
	double vsan_to_original[]{ -0.1,0.11,-0.2,0.12,-0.3,0.13,-0.4,0.14,-0.5,0.15,-0.6,0.16 };
	const double vsan_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double vsan_ld_to[]{ -0.71821575226612,0.217913480509704,0,0.160944371951889,0.0242222754090391,0,0.080927841840383,0.939364298334756,0,
		-0.183439286164212,0.270650608782223,0, -0.636933665725488, -0.160140331740515,0,0.50118146933823,0.492615984361422,0 };
	double vsan_ld_from_original[]{ 0.312632409860973, -0.126657370366339,0,0, -0.203805019548222,0.154682160657398,0,0, -0.0782591228641679,0.0666733807920581,0,0,
		0.575499782797526, -0.149058271792632,0,0, -0.54,0.177183326093251,0,0, -0.383666521865018,0.118691619606131,0,0 };
	double vsan_ld_to_original[]{ -0.1,0.11,0,-0.2,0.12,0,-0.3,0.13,0,-0.4,0.14,0,-0.5,0.15,0,-0.6,0.16,0 };
	const double vsan_alpha_from[]{ 0.685,0.825,0.747,-0.133,-0.321,0.256,0.985,0.236,-0.444,-0.187,0.333,0.365 };
	const double vsan_alpha_to[]{ -0.25455393806653,0.136978370127426,-0.109763907012028,0.0960555688522598,-0.204768039539904,0.332341074583689,
		-0.345859821541053,0.172662652195556,-0.534233416431372,0.0724649170648713,-0.324704632665443,0.243153996090355 };
	double vsan_alpha_from_original[]{ 1.25052963944389, - 0.506629481465357, - 0.81522007819289,0.618728642629592, - 0.313036491456672,0.266693523168233,
		2.3019991311901, - 0.59623308717053, - 2.16,0.708733304373003, - 1.53466608746007,0.474766478424523 };
	double vsan_alpha_to_original[]{ -0.1,0.11,-0.2,0.12,-0.3,0.13,-0.4,0.14,-0.5,0.15,-0.6,0.16 };
	const double vsan_alpha_ld_from[]{ 0.685,0.825,0,0,0.747,-0.133,0,0,-0.321,0.256,0,0,0.985,0.236,0,0,-0.444,-0.187,0,0,0.333,0.365,0,0 };
	const double vsan_alpha_ld_to[]{ -0.25455393806653,0.136978370127426,0,-0.109763907012028,0.0960555688522598,0,-0.204768039539904,0.332341074583689,0,
		-0.345859821541053,0.172662652195556,0,-0.534233416431372,0.0724649170648713,0,-0.324704632665443,0.243153996090355,0 };
	double vsan_alpha_ld_from_original[]{ 1.25052963944389,-0.506629481465357,0,0,-0.81522007819289,0.618728642629592,0,0,-0.313036491456672,0.266693523168233,0,0,
		2.3019991311901,-0.59623308717053,0,0,-2.16,0.708733304373003,0,0,-1.53466608746007,0.474766478424523,0,0 };
	double vsan_alpha_ld_to_original[]{ -0.1,0.11,0,-0.2,0.12,0,-0.3,0.13,0,-0.4,0.14,0,-0.5,0.15,0,-0.6,0.16,0 };

	s_tmv(pm, result);
	if (!s_is_equal(36, result, tmv, error))std::cout << "\"s_tmv\" failed" << std::endl;

	s_tv(pm, vs_from, result);
	if (!s_is_equal(6, result, vs_to, error))std::cout << "\"s_tv\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tv(pm, vs_ld_from, 3, result, 2);
	if (!s_is_equal(12, result, vs_ld_to, error))std::cout << "\"s_tv with ld\" failed" << std::endl;

	s_tv(0.25, pm, vs_alpha_from, result);
	if (!s_is_equal(6, result, vs_alpha_to, error))std::cout << "\"s_tv\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tv(0.25, pm, vs_alpha_ld_from, 3, result, 2);
	if (!s_is_equal(12, result, vs_alpha_ld_to, error))std::cout << "\"s_tv with ld\" failed" << std::endl;

	s_tv_n(2, pm, vsn_from, result);
	if (!s_is_equal(12, result, vsn_to, error))std::cout << "\"s_tv_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tv_n(2, pm, vsn_ld_from, 4, result, 3);
	if (!s_is_equal(18, result, vsn_ld_to, error))std::cout << "\"s_tv_n with ld\" failed" << std::endl;

	s_tv_n(2, 0.25, pm, vsn_alpha_from, result);
	if (!s_is_equal(12, result, vsn_alpha_to, error))std::cout << "\"s_tv_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_tv_n(2, 0.25, pm, vsn_alpha_ld_from, 4, result, 3);
	if (!s_is_equal(18, result, vsn_alpha_ld_to, error))std::cout << "\"s_tv_n with ld\" failed" << std::endl;

	s_tva(pm, vsa_from, vsa_to_original);
	if (!s_is_equal(6, vsa_to_original, vsa_to, error))std::cout << "\"s_tva\" failed" << std::endl;

	s_tva(pm, vsa_ld_from, 3, vsa_ld_to_original, 2);
	if (!s_is_equal(12, vsa_ld_to_original, vsa_ld_to, error))std::cout << "\"s_tva with ld\" failed" << std::endl;

	s_tva(0.25, pm, vsa_alpha_from, vsa_alpha_to_original);
	if (!s_is_equal(6, vsa_alpha_to_original, vsa_alpha_to, error))std::cout << "\"s_tva\" failed" << std::endl;

	s_tva(0.25, pm, vsa_alpha_ld_from, 3, vsa_alpha_ld_to_original, 2);
	if (!s_is_equal(12, vsa_alpha_ld_to_original, vsa_alpha_ld_to, error))std::cout << "\"s_tva with ld\" failed" << std::endl;

	s_tva_n(2, pm, vsan_from, vsan_to_original);
	if (!s_is_equal(12, vsan_to_original, vsan_to, error))std::cout << "\"s_tva_n\" failed" << std::endl;

	s_tva_n(2, pm, vsan_ld_from, 4, vsan_ld_to_original, 3);
	if (!s_is_equal(18, vsan_ld_to_original, vsan_ld_to, error))std::cout << "\"s_tva_n with ld\" failed" << std::endl;

	s_tva_n(2, 0.25, pm, vsan_alpha_from, vsan_alpha_to_original);
	if (!s_is_equal(12, vsan_alpha_to_original, vsan_alpha_to, error))std::cout << "\"s_tva_n\" failed" << std::endl;

	s_tva_n(2, 0.25, pm, vsan_alpha_ld_from, 4, vsan_alpha_ld_to_original, 3);
	if (!s_is_equal(18, vsan_alpha_ld_to_original, vsan_alpha_ld_to, error))std::cout << "\"s_tva_n with ld\" failed" << std::endl;/**/


	s_inv_tv(pm, vs_to, result);
	if (!s_is_equal(6, result, vs_from, error))std::cout << "\"s_inv_tv\" failed" << std::endl;

	std::fill_n(result, 18, 0);
	s_inv_tv(pm, vs_ld_to, 2, result, 3);
	if (!s_is_equal(18, result, vs_ld_from, error))std::cout << "\"s_inv_tv with ld\" failed" << std::endl;

	s_inv_tv(4.0, pm, vs_alpha_to, result);
	if (!s_is_equal(6, result, vs_alpha_from, error))std::cout << "\"s_inv_tv\" failed" << std::endl;

	std::fill_n(result, 18, 0);
	s_inv_tv(4.0, pm, vs_alpha_ld_to, 2, result, 3);
	if (!s_is_equal(18, result, vs_alpha_ld_from, error))std::cout << "\"s_inv_tv with ld\" failed" << std::endl;

	s_inv_tv_n(2, pm, vsn_to, result);
	if (!s_is_equal(12, result, vsn_from, error))std::cout << "\"s_tv_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_inv_tv_n(2, pm, vsn_ld_to, 3, result, 4);
	if (!s_is_equal(24, result, vsn_ld_from, error))std::cout << "\"s_tv_n with ld\" failed" << std::endl;

	s_inv_tv_n(2, 4.0, pm, vsn_alpha_to, result);
	if (!s_is_equal(12, result, vsn_alpha_from, error))std::cout << "\"s_tv_n\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_inv_tv_n(2, 4.0, pm, vsn_alpha_ld_to, 3, result, 4);
	if (!s_is_equal(24, result, vsn_alpha_ld_from, error))std::cout << "\"s_tv_n with ld\" failed" << std::endl;

	s_inv_tva(pm, vsa_to, vsa_from_original);
	if (!s_is_equal(6, vsa_from_original, vsa_from, error))std::cout << "\"s_inv_tva\" failed" << std::endl;

	s_inv_tva(pm, vsa_ld_to, 2, vsa_ld_from_original, 3);
	if (!s_is_equal(18, vsa_ld_from_original, vsa_ld_from, error))std::cout << "\"s_inv_tva with ld\" failed" << std::endl;

	s_inv_tva(4.0, pm, vsa_alpha_to, vsa_alpha_from_original);
	if (!s_is_equal(6, vsa_alpha_from_original, vsa_alpha_from, error))std::cout << "\"s_inv_tva\" failed" << std::endl;

	s_inv_tva(4.0, pm, vsa_alpha_ld_to, 2, vsa_alpha_ld_from_original, 3);
	if (!s_is_equal(18, vsa_alpha_ld_from_original, vsa_alpha_ld_from, error))std::cout << "\"s_inv_tva with ld\" failed" << std::endl;

	s_inv_tva_n(2, pm, vsan_to, vsan_from_original);
	if (!s_is_equal(12, vsan_from_original, vsan_from, error))std::cout << "\"s_inv_tva\" failed" << std::endl;

	s_inv_tva_n(2, pm, vsan_ld_to, 3, vsan_ld_from_original, 4);
	if (!s_is_equal(24, vsan_ld_from_original, vsan_ld_from, error))std::cout << "\"s_inv_tva with ld\" failed" << std::endl;

	s_inv_tva_n(2, 4.0, pm, vsan_alpha_to, vsan_alpha_from_original);
	if (!s_is_equal(12, vsan_alpha_from_original, vsan_alpha_from, error))std::cout << "\"s_inv_tva\" failed" << std::endl;

	s_inv_tva_n(2, 4.0, pm, vsan_alpha_ld_to, 3, vsan_alpha_ld_from_original, 4);
	if (!s_is_equal(24, vsan_alpha_ld_from_original, vsan_alpha_ld_from, error))std::cout << "\"s_inv_tva with ld\" failed" << std::endl;


	//s_tv_n(2, pm, vsn_from, result);
	//dlmwrite("C:\\Users\\py033\\Desktop\\r1.txt", result, 2, 6);

	double fsa_to_original11[]{ -0.1,0.11,-0.2,0.12,-0.3,0.13,-0.4,0.14,-0.5,0.15,-0.6,0.16 };
	s_inv_tv_n(2, -1.0, pm, fsa_to_original11, result);
	dlmwrite("C:\\Users\\py033\\Desktop\\r1.txt", result, 2, 6);

	//double fsa_to_original11[]{ -0.1,0.11,-0.2,0.12,-0.3,0.13,-0.4,0.14,-0.5,0.15,-0.6,0.16 };
	//s_inv_tf_n(2, -4.0, pm, fsa_to_original11, result);
	//dlmwrite("C:\\Users\\py033\\Desktop\\r1.txt", result, 2, 6);


	//s_inv_tfa(0.25, pm, fsa_alpha_from, 0.13, fsa_alpha_to_original);
	//if (!s_is_equal(6, fsa_alpha_to_original, fsa_alpha_to, error))std::cout << "\"s_tfa\" failed" << std::endl;

	//s_inv_tfa(0.25, pm, fsa_alpha_ld_from, 3, 0.13, fsa_alpha_ld_to_original, 2);
	//if (!s_is_equal(12, fsa_alpha_ld_to_original, fsa_alpha_ld_to, error))std::cout << "\"s_tfa with ld\" failed" << std::endl;

	//s_tf(pm, fsa_from_original, result);
	//dsp(result, 1, 6);
	
	//std::cout << "benchmark:s_tf_n: " << aris::core::benchmark(10000000, static_cast<void(*)(int, const double *, const double *, double *)>(&s_tf_n), 2, pm, fsan_alpha_from, fsan_alpha_to_original) << std::endl;
	//std::cout << "benchmark:s_tfa_n: " << aris::core::benchmark(10000000, static_cast<void(*)(int, const double *, const double *, double *)>(&s_tfa_n), 2, pm, fsan_alpha_from, fsan_alpha_to_original) << std::endl;

	//std::cout << "benchmark:s_tf_n alpha: " << aris::core::benchmark(10000000, static_cast<void(*)(int, double, const double *, const double *, double *)>(&s_tf_n), 2, 0.25, pm, fsan_alpha_from, fsan_alpha_to_original) << std::endl;
	//std::cout << "benchmark:s_tfa_n alpha: " << aris::core::benchmark(10000000, static_cast<void(*)(int, double , const double *, const double *, double, double *)>(&s_tfa_n), 2, 0.25, pm, fsan_alpha_from, 0.13, fsan_alpha_to_original) << std::endl;
	// 4.78e-8 //
	//std::cout << "benchmark:s_tf: " << aris::core::benchmark(10000000, static_cast<void(*)(const double*, const double*, double*)>(&s_tf), pm, fs_to, result) << std::endl;
	//std::cout << "benchmark:s_inv_tf: " << aris::core::benchmark(10000000, static_cast<void(*)(const double*, const double*, double*)>(&s_inv_tf), pm, fs_to, result) << std::endl;
	
	


	




	

}
void test_variable_change()
{
	const double pp[3] = { 0.1, 0.2, 0.3 };
	const double re313[3] = { 0.000423769269879415,   1.38980987554835,   1.79253453841257 };
	const double re321[3] = { 2.46823966120654, -1.28551725555848,  5.40636866254317 };
	const double rq[4] = { 0.4,-0.5, 0.6, std::sqrt(1 - 0.4*0.4 - 0.5*0.5 - 0.6*0.6) };
	const double rm[9] = { -0.22, -0.975499782797526,   0.000416847668728071,
		0.175499782797526, -0.04, -0.983666521865018,
		0.959583152331272, -0.216333478134982,   0.18 };
	const double pe313[6] = { 0.1, 0.2, 0.3,0.000423769269879415,   1.38980987554835,   1.79253453841257 };
	const double pe321[6] = { 0.1, 0.2, 0.3,2.46823966120654, -1.28551725555848,  5.40636866254317 };
	const double pq[7] = { 0.1, 0.2, 0.3,0.4,-0.5, 0.6, std::sqrt(1 - 0.4*0.4 - 0.5*0.5 - 0.6*0.6) };
	const double pm[16] = { -0.22, -0.975499782797526,   0.000416847668728071, 0.1,
		0.175499782797526, -0.04, -0.983666521865018, 0.2,
		0.959583152331272, -0.216333478134982,   0.18, 0.3,
		0,0,0,1 };

	const double vp[3] = { 0.307558670154491,   1.2433000508379, -1.04895965543501 };
	const double we313[3] = { -0.644213536852877, - 0.245050866834802, - 1.27836042009784 };
	const double we321[3] = { -4.19969388864156, -0.83045134600268,   3.46543753721832 };
	const double wq[4] = { 0.1, 0.2, -0.4, -(rq[0] * 0.1 + rq[1] * 0.2 - rq[2] * 0.4) / rq[3] };
	const double wm[9] = { 1.36, -0.30698536874045, -0.633709981238717,
		0.426985368740452,   0.8,   0.0436487757967661,
		0.233709981238715,   1.23635122420323,   0.24 , };
	const double ve313[6] = { 0.307558670154491,   1.2433000508379, -1.04895965543501,-0.644213536852877, -0.245050866834802, -1.27836042009784 };
	const double ve321[6] = { 0.307558670154491,   1.2433000508379, -1.04895965543501,-4.19969388864156, -0.83045134600268,   3.46543753721832 };
	const double vq[7] = { 0.307558670154491,   1.2433000508379, -1.04895965543501, 0.1, 0.2, -0.4, -(rq[0] * 0.1 + rq[1] * 0.2 - rq[2] * 0.4) / rq[3] };
	const double vm[16] = { 1.36, -0.30698536874045, -0.633709981238717,0.307558670154491,
		0.426985368740452,   0.8,   0.0436487757967661,1.2433000508379,
		0.233709981238715,   1.23635122420323,   0.24 , -1.04895965543501,
		0,0,0,0 };
	const double wa[3] = { -0.244517963270725,	1.25737650310373,	-0.874318412470487 };
	const double va[6] = { 0.307558670154491,   1.2433000508379, -1.04895965543501, -0.244517963270725,	1.25737650310373,	-0.874318412470487 };
	const double vs[6] = { -0.244517963270725,	1.25737650310373,	-0.874318412470487, -0.244517963270725,	1.25737650310373,	-0.874318412470487 };
	
	const double ap[3] = { 2.2628985000154, -0.843606386309081, -0.248846478459814 };
	const double xe313[3] = { 1.51734920338156,   1.71538128045296,   1.3693196878275 };
	const double xe321[3] = { -15.6049676192293,   4.50445705187534,   16.9352080725126 };
	const double xq[4] = { -0.033,   0.022, 0.011,   -(wq[0] * wq[0] + wq[1] * wq[1] + wq[2] * wq[2] + wq[3] * wq[3] + rq[0] * (-0.033) + rq[1] * (0.022) + rq[2] * (0.011)) / rq[3] };
	const double xm[9] = { -0.782400000000002,   2.58144759895694,   1.54784395313479,
		-2.32024759895695, -0.653600000000002,   0.450521351741563,
		-1.92944395313478, -1.05972135174157, -0.103200000000001 };
	const double ae313[6] = { 2.2628985000154, -0.843606386309081, -0.248846478459814, 1.51734920338156,   1.71538128045296,   1.3693196878275 };
	const double ae321[6] = { 2.2628985000154, -0.843606386309081, -0.248846478459814, -15.6049676192293,   4.50445705187534,   16.9352080725126 };
	const double aq[7] = { 2.2628985000154, -0.843606386309081, -0.248846478459814, -0.033,   0.022, 0.011,   -(wq[0] * wq[0] + wq[1] * wq[1] + wq[2] * wq[2] + wq[3] * wq[3] + rq[0] * (-0.033) + rq[1] * (0.022) + rq[2] * (0.011)) / rq[3] };
	const double am[16] = { -0.782400000000002,   2.58144759895694,   1.54784395313479,2.2628985000154,
		-2.32024759895695, -0.653600000000002,   0.450521351741563,-0.843606386309081,
		-1.92944395313478, -1.05972135174157, -0.103200000000001,-0.248846478459814,
		0,0,0,0 };
	const double xa[3] = { 0.904633672502324, -1.24440604199266,   1.45568007018557 };
	const double aa[6] = { 2.2628985000154, -0.843606386309081, -0.248846478459814, 0.904633672502324, -1.24440604199266,   1.45568007018557 };
	const double as[6] = { 3.15925342342501, -0.192390604845803,   0.136512424183815,   0.904633672502324, -1.24440604199266,   1.45568007018557 };

	double result_pm_for_position[16] = { -0.22, -0.975499782797526,   0.000416847668728071, 0,
		0.175499782797526, -0.04, -0.983666521865018, 0,
		0.959583152331272, -0.216333478134982,   0.18,0,
		0,0,0,1 };
	double result_vs_for_position[6] = { 0,	0,	0, -0.244517963270725,	1.25737650310373,	-0.874318412470487 };
	double result_as_for_position[6] = { 0,  0,   0,   0.904633672502324, -1.24440604199266,   1.45568007018557 };
	double result_pm_for_angle[16] = { 1,0,0,0.1,
		0,1,0,0.2,
		0,0,1,0.3,
		0,0,0,1 };
	double result_vs_for_angle[6] = { -0.244517963270725,	1.25737650310373,	-0.874318412470487, 0,0,0 };
	double result_as_for_angle[6] = { 3.15925342342501, -0.192390604845803,   0.136512424183815,   0,0,0 };
	double result[16];
	double result1[16];

	s_re2rm(re321, result, "321");
	if (!s_is_equal(9, result, rm, error))std::cout << "\"s_re2rm 321\" failed" << std::endl;

	s_re2rm(re313, result);
	if (!s_is_equal(9, result, rm, error))std::cout << "\"s_re2rm 313\" failed" << std::endl;

	s_rm2re(rm, result, "321");
	if (!s_is_equal(3, result, re321, error))std::cout << "\"s_rm2re 321\" failed" << std::endl;

	s_rm2re(rm, result);
	if (!s_is_equal(3, result, re313, error))std::cout << "\"s_rm2re 313\" failed" << std::endl;

	s_rq2rm(rq, result);
	if (!s_is_equal(9, result, rm, error))std::cout << "\"s_rq2rm\" failed" << std::endl;

	s_rm2rq(rm, result);
	if (!s_is_equal(4, result, rq, error))std::cout << "\"s_rm2rq\" failed" << std::endl;

	s_pp2pm(pp, result_pm_for_position);
	if (!s_is_equal(16, result_pm_for_position, pm, error))std::cout << "\"s_pp2pm\" failed" << std::endl;

	s_pm2pp(pm, result);
	if (!s_is_equal(3, result, pp, error))std::cout << "\"s_pm2pp\" failed" << std::endl;
	
	s_re2pm(re321, result_pm_for_angle, "321");
	if (!s_is_equal(16, result_pm_for_angle, pm, error))std::cout << "\"s_re2pm\" failed" << std::endl;

	s_re2pm(re313, result_pm_for_angle);
	if (!s_is_equal(16, result_pm_for_angle, pm, error))std::cout << "\"s_re2pm\" failed" << std::endl;
	
	s_pm2re(pm, result, "321");
	if (!s_is_equal(3, result, re321, error))std::cout << "\"s_pm2re\" failed" << std::endl;

	s_pm2re(pm, result);
	if (!s_is_equal(3, result, re313, error))std::cout << "\"s_pm2re\" failed" << std::endl;

	s_rq2pm(rq, result_pm_for_angle);
	if (!s_is_equal(16, result_pm_for_angle, pm, error))std::cout << "\"s_rq2pm\" failed" << std::endl;

	s_pm2rq(pm, result);
	if (!s_is_equal(4, result, rq, error))std::cout << "\"s_pm2rq\" failed" << std::endl;

	s_rm2pm(rm, result_pm_for_angle);
	if (!s_is_equal(16, result_pm_for_angle, pm, error))std::cout << "\"s_rm2pm\" failed" << std::endl;

	s_pm2rm(pm, result);
	if (!s_is_equal(9, result, rm, error))std::cout << "\"s_pm2rm\" failed" << std::endl;

	s_pe2pm(pe321, result, "321");
	if (!s_is_equal(16, pm, result, error))std::cout << "\"s_pe2pm\" failed" << std::endl;

	s_pe2pm(pe313, result);
	if (!s_is_equal(16, result, pm, error))std::cout << "\"s_pe2pm\" failed" << std::endl;
	
	s_pm2pe(pm, result, "321");
	if (!s_is_equal(6, result, pe321, error))std::cout << "\"s_pm2pe\" failed" << std::endl;

	s_pm2pe(pm, result);
	if (!s_is_equal(6, result, pe313, error))std::cout << "\"s_pm2pe\" failed" << std::endl;
	
	s_pq2pm(pq, result);
	if (!s_is_equal(16, pm, result, error))std::cout << "\"s_pq2pm\" failed" << std::endl;

	s_pm2pq(pm, result);
	if (!s_is_equal(7, pq, result, error))std::cout << "\"s_pm2pq\" failed" << std::endl;



	s_wa2we(wa, re313, result, "313");
	if (!s_is_equal(3, result, we313, error))std::cout << "\"s_wa2we 313\" failed" << std::endl;

	s_wa2we(wa, re321, result, "321");
	if (!s_is_equal(3, result, we321, error))std::cout << "\"s_wa2we 321\" failed" << std::endl;

	s_we2wa(re313, we313, result, "313");
	if (!s_is_equal(3, result, wa, error))std::cout << "\"s_we2wa 313\" failed" << std::endl;

	s_we2wa(re321, we321, result, "321");
	if (!s_is_equal(3, result, wa, error))std::cout << "\"s_we2wa 321\" failed" << std::endl;

	s_wq2wa(rq, wq, result);
	if (!s_is_equal(3, result, wa, error))std::cout << "\"s_wq2wa\" failed" << std::endl;

	s_wa2wq(wa, rq, result);
	if (!s_is_equal(4, result, wq, error))std::cout << "\"s_wa2wq\" failed" << std::endl;

	s_wa2wm(wa, rm, result);
	if (!s_is_equal(9, result, wm, error))std::cout << "\"s_wa2wm\" failed" << std::endl;

	s_wm2wa(rm, wm, result);
	if (!s_is_equal(3, result, wa, error))std::cout << "\"s_wm2wa\" failed" << std::endl;

	s_vs2vp(vs, pp, result);
	if (!s_is_equal(3, result, vp, error))std::cout << "\"s_vs2vp\" failed" << std::endl;

	s_vp2vs(pp, vp, result_vs_for_position);
	if (!s_is_equal(6, result_vs_for_position, vs, error))std::cout << "\"s_vp2vs\" failed" << std::endl;

	s_we2vs(re313, we313, result, "313");
	if (!s_is_equal(3, result + 3, vs + 3, error))std::cout << "\"s_we2vs 313\" failed" << std::endl;

	s_we2vs(re321, we321, result, "321");
	if (!s_is_equal(3, result + 3, vs + 3, error))std::cout << "\"s_we2vs 321\" failed" << std::endl;
	
	s_vs2we(vs, re313, result, "313");
	if (!s_is_equal(3, result, we313, error))std::cout << "\"s_vs2we 313\" failed" << std::endl;

	s_vs2we(vs, re321, result, "321");
	if (!s_is_equal(3, result, we321, error))std::cout << "\"s_vs2we 321\" failed" << std::endl;

	s_wq2vs(rq, wq, result_vs_for_angle);
	if (!s_is_equal(6, result_vs_for_angle, vs, error))std::cout << "\"s_wq2vs\" failed" << std::endl;

	s_vs2wq(vs, rq, result);
	if (!s_is_equal(3, result, wq, error))std::cout << "\"s_vs2wq\" failed" << std::endl;

	s_wm2vs(rm, wm, result_vs_for_angle);
	if (!s_is_equal(6, result_vs_for_angle, vs, error))std::cout << "\"s_wm2vs\" failed" << std::endl;

	s_vs2wm(vs, rm, result);
	if (!s_is_equal(9, result, wm, error))std::cout << "\"s_vs2wm\" failed" << std::endl;

	s_wa2vs(wa, result_vs_for_angle);
	if (!s_is_equal(6, result_vs_for_angle, vs, error))std::cout << "\"s_wa2vs\" failed" << std::endl;

	s_vs2wa(vs, result);
	if (!s_is_equal(3, result, wa, error))std::cout << "\"s_vs2wa\" failed" << std::endl;

	s_ve2vs(pe313, ve313, result, "313");
	if (!s_is_equal(6, result, vs, error))std::cout << "\"s_ve2vs 313\" failed" << std::endl;

	s_ve2vs(pe321, ve321, result, "321");
	if (!s_is_equal(6, result, vs, error))std::cout << "\"s_ve2vs 321\" failed" << std::endl;

	s_vs2ve(vs, pe313, result, "313");
	if (!s_is_equal(3, result, ve313, error))std::cout << "\"s_vs2ve 313\" failed" << std::endl;

	s_vs2ve(vs, pe321, result, "321");
	if (!s_is_equal(3, result, ve321, error))std::cout << "\"s_vs2ve 321\" failed" << std::endl;

	s_vs2vq(vs, pq, result);
	if (!s_is_equal(7, result, vq, error))std::cout << "\"s_vs2vq\" failed" << std::endl;

	s_vq2vs(pq, vq, result);
	if (!s_is_equal(6, result, vs, error))std::cout << "\"s_vq2vs\" failed" << std::endl;

	s_vs2vm(vs, pm, result);
	if (!s_is_equal(16, result, vm, error))std::cout << "\"s_vs2vm\" failed" << std::endl;

	s_vm2vs(pm, vm, result);
	if (!s_is_equal(6, result, vs, error))std::cout << "\"s_vm2vs\" failed" << std::endl;

	s_vs2va(vs, pp, result);
	if (!s_is_equal(6, result, va, error))std::cout << "\"s_vs2va\" failed" << std::endl;

	s_va2vs(pp, va, result);
	if (!s_is_equal(6, result, vs, error))std::cout << "\"s_va2vs\" failed" << std::endl;


	s_xa2xe(wa, xa, re313, result, result1, "313");
	if (!(s_is_equal(3, result, xe313, error)&&(s_is_equal(3, result1, we313, error))))std::cout << "\"s_xa2xe 313\" failed" << std::endl;

	s_xa2xe(wa, xa, re321, result, result1, "321");
	if (!(s_is_equal(3, result, xe321, error)&&(s_is_equal(3, result1, we321, error))))std::cout << "\"s_xa2xe 321\" failed" << std::endl;

	s_xe2xa(re313, we313, xe313, result, result1, "313");
	if (!(s_is_equal(3, result, xa, error)&&(s_is_equal(3, result1, wa, error))))std::cout << "\"s_xe2xa 313\" failed" << std::endl;

	s_xe2xa(re321, we321, xe321, result, result1, "321");
	if (!(s_is_equal(3, result, xa, error)&&(s_is_equal(3, result1, wa, error))))std::cout << "\"s_xe2xa 321\" failed" << std::endl;

	s_xq2xa(rq, wq, xq, result);
	if (!s_is_equal(3, result, xa, error))std::cout << "\"s_xq2xa\" failed" << std::endl;

	s_xa2xq(wa, xa, rq, result);
	if (!s_is_equal(4, result, xq, error))std::cout << "\"s_xa2xq\" failed" << std::endl;

	s_xa2xm(wa, xa, rm, result);
	if (!s_is_equal(9, result, xm, error))std::cout << "\"s_xa2xm\" failed" << std::endl;

	s_xm2xa(rm, wm, xm, result);
	if (!s_is_equal(3, result, xa, error))std::cout << "\"s_xm2xa\" failed" << std::endl;

	s_as2ap(vs, as, pp, result);
	if (!s_is_equal(3, result, ap, error))std::cout << "\"s_as2ap\" failed" << std::endl;

	s_ap2as(pp, vp, ap, result_as_for_position, result_vs_for_position);
	if (!(s_is_equal(6, result_as_for_position, as, error) && (s_is_equal(6, result_vs_for_position, vs, error))))std::cout << "\"s_ap2as\" failed" << std::endl;

	s_xe2as(re313, we313, xe313, result, result1);
	if (!(s_is_equal(3, result + 3, as + 3, error) && (s_is_equal(3, result1 + 3, vs + 3, error))))std::cout << "\"s_xe2as 313\" failed" << std::endl;

	s_xe2as(re321, we321, xe321, result, result1, "321");
	if (!(s_is_equal(3, result + 3, as + 3, error) && (s_is_equal(3, result1 + 3, vs + 3, error))))std::cout << "\"s_xe2as 321\" failed" << std::endl;

	s_as2xe(vs, as, re313, result, result1);
	if (!s_is_equal(3, result, xe313, error))std::cout << "\"s_as2xe 313\" failed" << std::endl;

	s_as2xe(vs, as, re321, result, result1, "321");
	if (!s_is_equal(3, result, xe321, error))std::cout << "\"s_as2xe 321\" failed" << std::endl;

	s_xq2as(rq, wq, xq, result_as_for_angle);
	if (!s_is_equal(6, result_as_for_angle, as, error))std::cout << "\"s_xq2as\" failed" << std::endl;

	s_as2xq(vs, as, rq, result);
	if (!s_is_equal(3, result, xq, error))std::cout << "\"s_as2xq\" failed" << std::endl;

	s_xm2as(rm, wm, xm, result_as_for_angle);
	if (!s_is_equal(6, result_as_for_angle, as, error))std::cout << "\"s_xm2as\" failed" << std::endl;

	s_as2xm(vs, as, rm, result);
	if (!s_is_equal(9, result, xm, error))std::cout << "\"s_as2xm\" failed" << std::endl;

	s_xa2as(xa, result_as_for_angle);
	if (!s_is_equal(6, result_as_for_angle, as, error))std::cout << "\"s_xa2as\" failed" << std::endl;

	s_as2xa(as, result);
	if (!s_is_equal(3, result, xa, error))std::cout << "\"s_as2xa\" failed" << std::endl;

	s_as2ae(vs, as, pe313, result, result1);
	if (!(s_is_equal(6, result, ae313, error)&&s_is_equal(6, result1, ve313, error)))std::cout << "\"s_as2ae\" failed" << std::endl;

	s_as2ae(vs, as, pe321, result, result1, "321");
	if (!(s_is_equal(6, result, ae321, error) && s_is_equal(6, result1, ve321, error)))std::cout << "\"s_as2ae\" failed" << std::endl;

	s_ae2as(pe313, ve313, ae313, result, result1);
	if (!(s_is_equal(6, result, as, error) && s_is_equal(6, result1, vs, error)))std::cout << "\"s_ae2as\" failed" << std::endl;

	s_ae2as(pe321, ve321, ae321, result, result1, "321");
	if (!(s_is_equal(6, result, as, error) && s_is_equal(6, result1, vs, error)))std::cout << "\"s_ae2as\" failed" << std::endl;

	s_as2aq(vs, as, pq, result);
	if (!s_is_equal(7, result, aq, error))std::cout << "\"s_as2aq\" failed" << std::endl;

	s_aq2as(pq, vq, aq, result);
	if (!s_is_equal(6, result, as, error))std::cout << "\"s_aq2as\" failed" << std::endl;

	s_as2am(vs, as, pm, result);
	if (!s_is_equal(16, result, am, error))std::cout << "\"s_as2am\" failed" << std::endl;

	s_am2as(pm, vm, am, result);
	if (!s_is_equal(6, result, as, error))std::cout << "\"s_am2as\" failed" << std::endl;

	s_as2aa(vs, as, pp, result);
	if (!s_is_equal(6, result, aa, error))std::cout << "\"s_as2aa\" failed" << std::endl;

	s_aa2as(pp, va, aa, result);
	if (!s_is_equal(6, result, as, error))std::cout << "\"s_aa2as\" failed" << std::endl;
}
void test_coordinate_transform()
{
	const double relative_vs[16] = { 0.12, -0.35, 0.26, 0.58, 0.36, -0.135 };
	const double relative_as[16] = { 0.14, 1.35, -0.35, -0.56, -0.34, 0.14 };
	const double relative_pm[16] = { -0.22, -0.975499782797526,   0.000416847668728071,   0.1,
		0.175499782797526, -0.04, -0.983666521865018,   0.2,
		0.959583152331272, -0.216333478134982,   0.18,   0.3,
		0,   0,   0,   1 };

	const double from_pp[3]{ 0.13, -0.22, 0.45 };
	const double to_pp[3]{ 0.286197533666383, -0.21103496307558,   0.553339174992761 };
	const double from_re_313[3]{ 4.83, 0.76, 0.45 };
	const double to_re_321[3]{ 6.03703796978214, -0.696087712802565,   2.29525788843731 };
	const double from_re_321[3]{ 3.856, -0.696087712802565,   2.29525788843731 };
	const double to_re_313[3]{ 3.42785042695091,   2.77225969913703,   4.30966052384328 };
	const double from_rq[4]{ 0.4,-0.5, 0.6, std::sqrt(1 - 0.4*0.4 - 0.5*0.5 - 0.6*0.6) };
	const double to_rq[4]{ -0.383666521865017,   0.479583152331272, -0.575499782797526,   0.54 };
	const double from_rm[9]{ 0.808307066774345, -0.072065911490471, 0.584333971461272,
		0.341746746490328,   0.865601553329486, -0.365982393206091,
		-0.479425538604203,   0.495520388354132,   0.724300143351802 };
	const double to_rm[9]{ -0.511401279081528, -0.828333070215518,   0.228764194184996,
		0.599782696845049, -0.534698430872375, -0.595280021996288,
		0.615409983928647, -0.16721815933072,   0.770265304210822 };
	const double from_pe_313[6]{ 0.13, -0.22, 0.45, 4.83, 0.76, 0.45 };
	const double to_pe_321[6]{ 0.286197533666383, -0.21103496307558,   0.553339174992761,6.03703796978214, -0.696087712802565,   2.29525788843731 };
	const double from_pe_321[6]{ 0.13, -0.22, 0.45, 3.856, -0.696087712802565,   2.29525788843731 };
	const double to_pe_313[6]{ 0.286197533666383, -0.21103496307558,   0.553339174992761,3.42785042695091,   2.77225969913703,   4.30966052384328 };
	const double from_pq[7]{ 0.13, -0.22, 0.45, 0.4,-0.5, 0.6, std::sqrt(1 - 0.4*0.4 - 0.5*0.5 - 0.6*0.6) };
	const double to_pq[7]{ 0.286197533666383, -0.21103496307558,   0.553339174992761, -0.383666521865017,   0.479583152331272, -0.575499782797526,   0.54 };
	const double from_pm[16]{ 0.808307066774345, -0.072065911490471, 0.584333971461272, 0.13,
		0.341746746490328,   0.865601553329486, -0.365982393206091,-0.22,
		-0.479425538604203,   0.495520388354132,   0.724300143351802,0.45,
		0,0,0,1 };
	const double to_pm[16]{ -0.511401279081528, -0.828333070215518,   0.228764194184996, 0.286197533666383,
		0.599782696845049, -0.534698430872375, -0.595280021996288, -0.21103496307558,
		0.615409983928647, -0.16721815933072,   0.770265304210822,   0.553339174992761,
		0 ,  0 ,  0,   1 };

	const double from_vp[3]{ 0.131, -0.221, 0.451 };
	const double to_vp[3]{ 0.47766583327904, -1.12137651835541,   0.289263700919493 };
	const double from_we_313[3]{ 1.03, 0.73, 0.25 };
	const double to_we_321[3]{ -0.677310010504109, -0.42894848193491,   1.82130169173659 };
	const double from_we_321[3]{ 2.15, 0.76, 1.25 };
	const double to_we_313[3]{ -8.60099441931481, - 2.91077197886926, - 9.69351986665146 };
	const double from_wq[4]{ 0.1, 0.2, -0.4, -(from_rq[0] * 0.1 + from_rq[1] * 0.2 - from_rq[2] * 0.4) / from_rq[3] };
	const double to_wq[4]{ -0.292793710222811,   0.286847417856529, -0.141803596258453, -0.613907911417607 };
	const double from_wm[9] = { 0.0291954874793394, -0.182528252419306, -0.0628972223520089,
		0.196923491067634, -0.108112316607135, -0.0718182822377014,
		0.189595409314217,   0.162310423942327,   0.0144536170779726, };
	const double to_wm[9]{ 0.104075460683106,   0.0133045900952464,   0.280834839144192,
		-0.477150412775713,   0.0214429907194124, -0.500020299468546,
		0.551519952476166, -0.134472030683956, -0.469834287697671 };
	const double from_wa[3]{ -0.918, 0.928, 0.458 };
	const double to_wa[3]{ -0.123112882203827, -0.288748067622307, -1.13421480154937 };
	const double from_ve_313[6]{ 0.131, -0.221, 0.451, 1.03, 0.73, 0.25 };
	const double to_ve_321[6]{ 0.47766583327904, -1.12137651835541,   0.289263700919493, -0.677310010504109, -0.42894848193491,   1.82130169173659 };
	const double from_ve_321[6]{ 0.131, -0.221, 0.451, 2.15, 0.76, 1.25 };
	const double to_ve_313[6]{ 0.47766583327904, -1.12137651835541,   0.289263700919493, -8.60099441931481, -2.91077197886926, -9.69351986665146 };
	const double from_vq[7] = { 0.03,   0.1525,   0.355,    0.1, 0.2, -0.4, -(from_rq[0] * 0.1 + from_rq[1] * 0.2 - from_rq[2] * 0.4) / from_rq[3] };
	const double to_vq[7] = { 0.135496647027967, -1.05961001031892,   0.0942652484506193,   -0.292793710222811,   0.286847417856529, -0.141803596258453, -0.613907911417607 };
	const double from_vm[16] = { 0.0291954874793394, -0.182528252419306, -0.0628972223520089,   0.03,
		0.196923491067634, -0.108112316607135, -0.0718182822377014,   0.1525,
		0.189595409314217,   0.162310423942327,   0.0144536170779726,   0.355,
		0 ,  0,   0,   0 };
	const double to_vm[16] = { 0.104075460683106,   0.0133045900952464,   0.280834839144192,   0.135496647027967,
		-0.477150412775713,   0.0214429907194124, -0.500020299468546, -1.05961001031892,
		0.551519952476166, -0.134472030683956, -0.469834287697671,   0.0942652484506192,
		0,   0 ,  0,   0 };
	const double from_va[6] = { 0.089,   0.26325 ,  0.3935 ,  0.2, -0.15,   0.125 };
	const double to_va[6] = { 0.0144960947183866, -1.09155668422567,   0.133851721734715,   0.68237707337822,   0.278141641326378,   0.111866652186502 };
	const double from_vs[6] = { -0.1873, -0.1412,   0.1365,   0.04982,   0.1345,   0.03744 };
	const double to_vs[6] = { 0.314132747625686, -0.556683321739415,   0.160469757942957,   0.43785048599045,   0.326534924600346, -0.109551220160011 };
	
	const double from_ap[3]{ 0.12,   0.13, -0.14 };
	const double to_ap[3]{ -0.183017842291836,   1.44829117674852, -1.20119377113485 };
	const double from_xe_313[3]{ 4.83, 0.76, 0.45 };
	const double to_xe_321[3]{ -0.916190408904469, - 4.34620837330883,   2.91658574391217 };
	const double from_xe_321[3]{ 3.856, -0.696087712802565,   2.29525788843731 };
	const double to_xe_313[3]{ 188.69146781591,   49.4283048797986,   191.948584567729 };
	const double from_xq[4]{ -0.033,   0.022, 0.011,   -(from_wq[0] * from_wq[0] + from_wq[1] * from_wq[1] + from_wq[2] * from_wq[2] + from_wq[3] * from_wq[3] + from_rq[0] * (-0.033) + from_rq[1] * 0.022 + from_rq[2] * 0.011) / from_rq[3] };
	const double to_xq[4]{ 0.0195967544652706, - 0.915878348828718,   0.85596957486878,   0.693274013402014 };
	const double from_xm[9] = { -0.19607150371156, -0.0824023375945621,   0.195817097864919,
		0.0345175399147836,   0.0110332817274978,   0.210315261589722,
		-0.148327659454663, -0.175246744763661, -0.0645778320357833};
	const double to_xm[9]{ -0.168189089112595,   0.0240777134273968, -0.681683032081897,
		0.0646710887930607,   0.0754796609525905,   0.800601976050679,
		-1.08460897398942, -0.248679220742461,   0.107617812109963};
	const double from_xa[3]{ -0.16,   0.17,   0.18 };
	const double to_xa[3]{ -1.13785824818199,   0.122524884812844, - 0.141063237283511 };
	const double from_aa[6] = { -0.28023125, -0.165775,   0.1247, -0.16,   0.17,   0.18 };
	const double to_aa[6] = { 0.0898265507450043,   1.43483887623279, -1.10554368182179, -0.612738814129007, -0.708943502357538, -0.10224359010281 };
	const double from_ae_313[6]{ 0.12,   0.13, -0.14,4.83, 0.76, 0.45 };
	const double to_ae_321[6]{ -0.183017842291836,   1.44829117674852, -1.20119377113485,-0.916190408904469, -4.34620837330883,   2.91658574391217 };
	const double from_ae_321[6]{ 0.12,   0.13, -0.14,3.856, -0.696087712802565,   2.29525788843731 };
	const double to_ae_313[6]{ -0.183017842291836,   1.44829117674852, -1.20119377113485,188.69146781591,   49.4283048797986,   191.948584567729 };
	const double from_aq[7] = { -0.1873125, -0.14125,   0.136,   from_xq[0],   from_xq[1],   from_xq[2],   from_xq[3] };
	const double to_aq[7] = { 0.025588345140825,   1.4522998248645, -1.06971424926844,   to_xq[0],   to_xq[1],   to_xq[2],   to_xq[3] };
	const double from_am[16] = { -0.19607150371156, -0.0824023375945621,   0.195817097864919, -0.1873125,
		0.0345175399147836,   0.0110332817274978,   0.210315261589722, -0.14125,
		-0.148327659454663, -0.175246744763661, -0.0645778320357833,   0.136,
		0,   0,   0,   0 };
	const double to_am[16] = { -0.168189089112595,   0.0240777134273968, -0.681683032081897,   0.025588345140825,
		0.0646710887930607,   0.0754796609525905,   0.800601976050679,   1.4522998248645,
		-1.08460897398942, -0.248679220742461,   0.107617812109963, -1.06971424926844,
		0,   0,   0,   0 };
	const double from_as[6] = { -0.1899, -0.1475,   0.3165,   0.9482,   0.3145,   0.7344 };
	const double to_as[6] = { 0.627235974450473,   0.750818078071529, -0.640716977516731, -1.07044877319847, -0.904145907524959,   1.1457959474787 };

	double result[16], result2[16], result3[16];

	s_pp2pp(relative_pm, from_pp, result);
	if (!s_is_equal(3, to_pp, result, error))std::cout << "\"s_pp2pp\" failed" << std::endl;

	s_inv_pp2pp(relative_pm, to_pp, result);
	if (!s_is_equal(3, from_pp, result, error))std::cout << "\"s_inv_pp2pp\" failed" << std::endl;

	s_re2re(relative_pm, from_re_313, result, "313", "321");
	if (!s_is_equal(3, to_re_321, result, error))std::cout << "\"s_re2re\" failed" << std::endl;

	s_inv_re2re(relative_pm, to_re_321, result, "321", "313");
	if (!s_is_equal(3, from_re_313, result, error))std::cout << "\"s_inv_re2re\" failed" << std::endl;

	s_re2re(relative_pm, from_re_321, result, "321", "313");
	if (!s_is_equal(3, to_re_313, result, error))std::cout << "\"s_re2re\" failed" << std::endl;

	s_inv_re2re(relative_pm, to_re_313, result, "313", "321");
	if (!s_is_equal(3, from_re_321, result, error))std::cout << "\"s_inv_re2re\" failed" << std::endl;

	s_rq2rq(relative_pm, from_rq, result);
	if (!s_is_equal(4, to_rq, result, error))std::cout << "\"s_rq2rq\" failed" << std::endl;

	s_inv_rq2rq(relative_pm, to_rq, result);
	if (!s_is_equal(4, from_rq, result, error))std::cout << "\"s_inv_rq2rq\" failed" << std::endl;

	s_rm2rm(relative_pm, from_rm, result);
	if (!s_is_equal(3, to_rm, result, error))std::cout << "\"s_rm2rm\" failed" << std::endl;

	s_inv_rm2rm(relative_pm, to_rm, result);
	if (!s_is_equal(3, from_rm, result, error))std::cout << "\"s_inv_rm2rm\" failed" << std::endl;

	s_pe2pe(relative_pm, from_pe_313, result, "313", "321");
	if (!s_is_equal(6, to_pe_321, result, error))std::cout << "\"s_pe2pe 313 to 321\" failed" << std::endl;

	s_inv_pe2pe(relative_pm, to_pe_321, result, "321", "313");
	if (!s_is_equal(6, from_pe_313, result, error))std::cout << "\"s_inv_pe2pe 321 to 313\" failed" << std::endl;

	s_pe2pe(relative_pm, from_pe_321, result, "321", "313");
	if (!s_is_equal(6, to_pe_313, result, error))std::cout << "\"s_pe2pe 321 to 313\" failed" << std::endl;

	s_inv_pe2pe(relative_pm, to_pe_313, result, "313", "321");
	if (!s_is_equal(6, from_pe_321, result, error))std::cout << "\"s_inv_pe2pe 313 to 321\" failed" << std::endl;

	s_pq2pq(relative_pm, from_pq, result);
	if (!s_is_equal(7, to_pq, result, error))std::cout << "\"s_pq2pq\" failed" << std::endl;

	s_inv_pq2pq(relative_pm, to_pq, result);
	if (!s_is_equal(7, from_pq, result, error))std::cout << "\"s_inv_pq2pq\" failed" << std::endl;

	s_pm2pm(relative_pm, from_pm, result);
	if (!s_is_equal(16, to_pm, result, error))std::cout << "\"s_pm2pm\" failed" << std::endl;

	s_inv_pm2pm(relative_pm, to_pm, result);
	if (!s_is_equal(16, from_pm, result, error))std::cout << "\"s_inv_pm2pm\" failed" << std::endl;



	s_vp2vp(relative_pm, relative_vs, from_pp, from_vp, result, result2);
	if (!(s_is_equal(3, to_vp, result, error) && s_is_equal(3, to_pp, result2, error)))std::cout << "\"s_vp2vp\" failed" << std::endl;

	s_inv_vp2vp(relative_pm, relative_vs, to_pp, to_vp, result, result2);
	if (!(s_is_equal(3, from_vp, result, error) && s_is_equal(3, from_pp, result2, error)))std::cout << "\"s_inv_vp2vp\" failed" << std::endl;

	s_we2we(relative_pm, relative_vs, from_re_313, from_we_313, result, result2, "313", "321");
	if (!(s_is_equal(3, to_we_321, result, error) && s_is_equal(3, to_re_321, result2, error)))std::cout << "\"s_we2we 313 to 321\" failed" << std::endl;

	s_inv_we2we(relative_pm, relative_vs, to_re_321, to_we_321, result, result2, "321", "313");
	if (!(s_is_equal(3, from_we_313, result, error) && s_is_equal(3, from_re_313, result2, error)))std::cout << "\"s_inv_we2we 313\" failed" << std::endl;

	s_we2we(relative_pm, relative_vs, from_re_321, from_we_321, result, result2, "321", "313");
	if (!(s_is_equal(3, to_we_313, result, error) && s_is_equal(3, to_re_313, result2, error)))std::cout << "\"s_we2we 313 to 321\" failed" << std::endl;

	s_inv_we2we(relative_pm, relative_vs, to_re_313, to_we_313, result, result2, "313", "321");
	if (!(s_is_equal(3, from_we_321, result, error) && s_is_equal(3, from_re_321, result2, error)))std::cout << "\"s_inv_we2we 313\" failed" << std::endl;

	s_wq2wq(relative_pm, relative_vs, from_rq, from_wq, result, result2);
	if (!(s_is_equal(4, to_wq, result, error) && s_is_equal(4, to_rq, result2, error)))std::cout << "\"s_wq2wq\" failed" << std::endl;

	s_inv_wq2wq(relative_pm, relative_vs, to_rq, to_wq, result, result2);
	if (!(s_is_equal(4, from_wq, result, error) && s_is_equal(4, from_rq, result2, error)))std::cout << "\"s_inv_wq2wq\" failed" << std::endl;

	s_wm2wm(relative_pm, relative_vs, from_rm, from_wm, result, result2);
	if (!(s_is_equal(9, to_wm, result, error) && s_is_equal(9, to_rm, result2, error)))std::cout << "\"s_wm2wm\" failed" << std::endl;

	s_inv_wm2wm(relative_pm, relative_vs, to_rm, to_wm, result, result2);
	if (!(s_is_equal(9, from_wm, result, error) && s_is_equal(9, from_rm, result2, error)))std::cout << "\"s_inv_wm2wm\" failed" << std::endl;

	s_wa2wa(relative_pm, relative_vs, from_wa, result);
	if (!s_is_equal(3, to_wa, result, error))std::cout << "\"s_wa2wa\" failed" << std::endl;

	s_inv_wa2wa(relative_pm, relative_vs, to_wa, result);
	if (!s_is_equal(3, from_wa, result, error))std::cout << "\"s_inv_wa2wa\" failed" << std::endl;

	s_ve2ve(relative_pm, relative_vs, from_pe_313, from_ve_313, result, result2, "313", "321");
	if (!(s_is_equal(6, to_ve_321, result, error) && s_is_equal(3, to_pe_321, result2, error)))std::cout << "\"s_ve2ve 313 to 321\" failed" << std::endl;

	s_inv_ve2ve(relative_pm, relative_vs, to_pe_321, to_ve_321, result, result2, "321", "313");
	if (!(s_is_equal(6, from_ve_313, result, error) && s_is_equal(3, from_pe_313, result2, error)))std::cout << "\"s_inv_ve2ve 313\" failed" << std::endl;

	s_ve2ve(relative_pm, relative_vs, from_pe_321, from_ve_321, result, result2, "321", "313");
	if (!(s_is_equal(6, to_ve_313, result, error) && s_is_equal(3, to_pe_313, result2, error)))std::cout << "\"s_ve2ve 313 to 321\" failed" << std::endl;

	s_inv_ve2ve(relative_pm, relative_vs, to_pe_313, to_ve_313, result, result2, "313", "321");
	if (!(s_is_equal(6, from_ve_321, result, error) && s_is_equal(3, from_pe_321, result2, error)))std::cout << "\"s_inv_ve2ve 313\" failed" << std::endl;

	s_vq2vq(relative_pm, relative_vs, from_pq, from_vq, result, result2);
	if (!(s_is_equal(7, to_vq, result, error) && s_is_equal(7, to_pq, result2, error)))std::cout << "\"s_vq2vq\" failed" << std::endl;

	s_inv_vq2vq(relative_pm, relative_vs, to_pq, to_vq, result, result2);
	if (!(s_is_equal(7, from_vq, result, error) && s_is_equal(7, from_pq, result2, error)))std::cout << "\"s_inv_vq2vq\" failed" << std::endl;

	s_vm2vm(relative_pm, relative_vs, from_pm, from_vm, result, result2);
	if (!(s_is_equal(16, to_vm, result, error) && s_is_equal(16, to_pm, result2, error)))std::cout << "\"s_vm2vm\" failed" << std::endl;

	s_inv_vm2vm(relative_pm, relative_vs, to_pm, to_vm, result, result2);
	if (!(s_is_equal(16, from_vm, result, error) && s_is_equal(16, from_pm, result2, error)))std::cout << "\"s_inv_vm2vm\" failed" << std::endl;

	s_va2va(relative_pm, relative_vs, from_pp, from_va, result, result2);
	if (!(s_is_equal(6, to_va, result, error) && s_is_equal(3, to_pp, result2, error)))std::cout << "\"s_va2va\" failed" << std::endl;

	s_inv_va2va(relative_pm, relative_vs, to_pp, to_va, result, result2);
	if (!(s_is_equal(6, from_va, result, error) && s_is_equal(3, from_pp, result2, error)))std::cout << "\"s_inv_va2va\" failed" << std::endl;

	s_vs2vs(relative_pm, relative_vs, from_vs, result);
	if (!s_is_equal(6, to_vs, result, error))std::cout << "\"s_vs2vs\" failed" << std::endl;

	s_inv_vs2vs(relative_pm, relative_vs, to_vs, result);
	if (!s_is_equal(6, from_vs, result, error))std::cout << "\"s_inv_vs2vs\" failed" << std::endl;



	s_ap2ap(relative_pm, relative_vs, relative_as, from_pp, from_vp, from_ap, result, result2, result3);
	if (!(s_is_equal(3, to_ap, result, error) && s_is_equal(3, to_vp, result2, error) && s_is_equal(3, to_pp, result3, error)))std::cout << "\"s_ap2ap\" failed" << std::endl;

	s_inv_ap2ap(relative_pm, relative_vs, relative_as, to_pp, to_vp, to_ap, result, result2, result3);
	if (!(s_is_equal(3, from_ap, result, error) && s_is_equal(3, from_vp, result2, error) && s_is_equal(3, from_pp, result3, error)))std::cout << "\"s_inv_ap2ap\" failed" << std::endl;

	s_xe2xe(relative_pm, relative_vs, relative_as, from_re_313, from_we_313, from_xe_313, result, result2, result3, "313", "321");
	if (!(s_is_equal(3, to_xe_321, result, error) && s_is_equal(3, to_we_321, result2, error) && s_is_equal(3, to_re_321, result3, error)))std::cout << "\"s_xe2xe 313 to 321\" failed" << std::endl;

	s_inv_xe2xe(relative_pm, relative_vs, relative_as, to_re_321, to_we_321, to_xe_321, result, result2, result3, "321", "313");
	if (!(s_is_equal(3, from_xe_313, result, error) && s_is_equal(3, from_we_313, result2, error) && s_is_equal(3, from_re_313, result3, error)))std::cout << "\"s_inv_xe2xe 321 to 313\" failed" << std::endl;
	
	s_xe2xe(relative_pm, relative_vs, relative_as, from_re_321, from_we_321, from_xe_321, result, result2, result3, "321", "313");
	if (!(s_is_equal(3, to_xe_313, result, error) && s_is_equal(3, to_we_313, result2, error) && s_is_equal(3, to_re_313, result3, error)))std::cout << "\"s_xe2xe 321 to 313\" failed" << std::endl;

	s_inv_xe2xe(relative_pm, relative_vs, relative_as, to_re_313, to_we_313, to_xe_313, result, result2, result3, "313", "321");
	if (!(s_is_equal(3, from_xe_321, result, error) && s_is_equal(3, from_we_321, result2, error) && s_is_equal(3, from_re_321, result3, error)))std::cout << "\"s_inv_xe2xe 313 to 321\" failed" << std::endl;

	s_xq2xq(relative_pm, relative_vs, relative_as, from_rq, from_wq, from_xq, result, result2, result3);
	if (!(s_is_equal(4, to_xq, result, error) && s_is_equal(4, to_wq, result2, error) && s_is_equal(4, to_rq, result3, error)))std::cout << "\"s_xq2xq\" failed" << std::endl;

	s_inv_xq2xq(relative_pm, relative_vs, relative_as, to_rq, to_wq, to_xq, result, result2, result3);
	if (!(s_is_equal(4, from_xq, result, error) && s_is_equal(4, from_wq, result2, error) && s_is_equal(4, from_rq, result3, error)))std::cout << "\"s_inv_xq2xq\" failed" << std::endl;

	s_xm2xm(relative_pm, relative_vs, relative_as, from_rm, from_wm, from_xm, result, result2, result3);
	if (!(s_is_equal(9, to_xm, result, error) && s_is_equal(9, to_wm, result2, error) && s_is_equal(9, to_rm, result3, error)))std::cout << "\"s_xm2xm\" failed" << std::endl;

	s_inv_xm2xm(relative_pm, relative_vs, relative_as, to_rm, to_wm, to_xm, result, result2, result3);
	if (!(s_is_equal(9, from_xm, result, error) && s_is_equal(9, from_wm, result2, error) && s_is_equal(9, from_rm, result3, error)))std::cout << "\"s_inv_xm2xm\" failed" << std::endl;

	s_xa2xa(relative_pm, relative_vs, relative_as, from_wa, from_xa, result, result2);
	if (!s_is_equal(3, to_xa, result, error))std::cout << "\"s_xa2xa\" failed" << std::endl;

	s_inv_xa2xa(relative_pm, relative_vs, relative_as, to_wa, to_xa, result, result2);
	if (!s_is_equal(3, from_xa, result, error))std::cout << "\"s_inv_xa2xa\" failed" << std::endl;
	
	s_ae2ae(relative_pm, relative_vs, relative_as, from_pe_313, from_ve_313, from_ae_313, result, result2, result3, "313", "321");
	if (!(s_is_equal(6, to_ae_321, result, error) && s_is_equal(6, to_ve_321, result2, error) && s_is_equal(6, to_pe_321, result3, error)))std::cout << "\"s_ae2ae 313 to 321\" failed" << std::endl;

	s_inv_ae2ae(relative_pm, relative_vs, relative_as, to_pe_321, to_ve_321, to_ae_321, result, result2, result3, "321", "313");
	if (!(s_is_equal(6, from_ae_313, result, error) && s_is_equal(6, from_ve_313, result2, error) && s_is_equal(6, from_pe_313, result3, error)))std::cout << "\"s_inv_ae2ae 321 to 313\" failed" << std::endl;
	
	s_ae2ae(relative_pm, relative_vs, relative_as, from_pe_321, from_ve_321, from_ae_321, result, result2, result3, "321", "313");
	if (!(s_is_equal(6, to_ae_313, result, error) && s_is_equal(6, to_ve_313, result2, error) && s_is_equal(6, to_pe_313, result3, error)))std::cout << "\"s_ae2ae 321 to 313\" failed" << std::endl;

	s_inv_ae2ae(relative_pm, relative_vs, relative_as, to_pe_313, to_ve_313, to_ae_313, result, result2, result3, "313", "321");
	if (!(s_is_equal(6, from_ae_321, result, error) && s_is_equal(6, from_ve_321, result2, error) && s_is_equal(6, from_pe_321, result3, error)))std::cout << "\"s_inv_ae2ae 313 to 321\" failed" << std::endl;

	s_aq2aq(relative_pm, relative_vs, relative_as, from_pq, from_vq, from_aq, result, result2, result3);
	if (!(s_is_equal(7, to_aq, result, error) && s_is_equal(7, to_vq, result2, error) && s_is_equal(7, to_pq, result3, error)))std::cout << "\"s_aq2aq\" failed" << std::endl;

	s_inv_aq2aq(relative_pm, relative_vs, relative_as, to_pq, to_vq, to_aq, result, result2, result3);
	if (!(s_is_equal(7, from_aq, result, error) && s_is_equal(7, from_vq, result2, error) && s_is_equal(7, from_pq, result3, error)))std::cout << "\"s_inv_aq2aq\" failed" << std::endl;

	s_am2am(relative_pm, relative_vs, relative_as, from_pm, from_vm, from_am, result, result2, result3);
	if (!(s_is_equal(16, to_am, result, error) && s_is_equal(16, to_vm, result2, error) && s_is_equal(16, to_pm, result3, error)))std::cout << "\"s_am2am\" failed" << std::endl;

	s_inv_am2am(relative_pm, relative_vs, relative_as, to_pm, to_vm, to_am, result, result2, result3);
	if (!(s_is_equal(16, from_am, result, error) && s_is_equal(16, from_vm, result2, error) && s_is_equal(16, from_pm, result3, error)))std::cout << "\"s_inv_am2am\" failed" << std::endl;

	s_aa2aa(relative_pm, relative_vs, relative_as, from_pp, from_va, from_aa, result, result2, result3);
	if (!(s_is_equal(6, to_aa, result, error) && s_is_equal(6, to_va, result2, error) && s_is_equal(3, to_pp, result3, error)))std::cout << "\"s_aa2aa\" failed" << std::endl;

	s_inv_aa2aa(relative_pm, relative_vs, relative_as, to_pp, to_va, to_aa, result, result2, result3);
	if (!(s_is_equal(6, from_aa, result, error) && s_is_equal(6, from_va, result2, error) && s_is_equal(3, from_pp, result3, error)))std::cout << "\"s_inv_aa2aa\" failed" << std::endl;

	s_as2as(relative_pm, relative_vs, relative_as, from_vs, from_as, result, result2);
	if (!(s_is_equal(6, to_as, result, error) && s_is_equal(6, to_vs, result2, error)))std::cout << "\"s_as2as\" failed" << std::endl;

	s_inv_as2as(relative_pm, relative_vs, relative_as, to_vs, to_as, result, result2);
	if (!(s_is_equal(6, from_as, result, error) && s_is_equal(6, from_vs, result2, error)))std::cout << "\"s_inv_as2as\" failed" << std::endl;

}
void test_solve()
{
	double result[36], result2[36], result3[36];
	
	
	const double ab[2] = { 2.46823966120654, -1.28551725555848 };
	const double vab[2] = { 5.886, -2.65 };
	const double aab[2] = { -1.234, 3.875 };
	const double pp31[3]{ -0.175499782797524,-0.220000000000002, -0.959583152331272 };
	const double vp31[3]{ 2.88069659757518,   0.954878838208465, - 0.745776923914583 };
	const double ap31[3]{ -18.6788800017547,   25.144386102382,   7.82919554768749 };
	

	s_sov_ab(pp31, result, "31");
	if (!s_is_equal(2, ab, result, error))std::cout << "\"s_sov_ab\" failed" << std::endl;

	s_sov_vab(pp31, vp31, result, result2, "31");
	if (!(s_is_equal(2, vab, result, error)&& s_is_equal(2, ab, result2, error)))std::cout << "\"s_sov_vab\" failed" << std::endl;

	s_sov_aab(pp31, vp31, ap31, result, result2, result3, "31");
	if (!(s_is_equal(2, aab, result, error) && s_is_equal(2, vab, result2, error) && s_is_equal(2, ab, result3, error)))std::cout << "\"s_sov_aab\" failed" << std::endl;

	const double from_pm[]{ -0.22, -0.975499782797526,   0.000416847668728071, 0.1,
		0.175499782797526, -0.04, -0.983666521865018, 0.2,
		0.959583152331272, -0.216333478134982,   0.18, 0.3,
		0,0,0,1 };
	const double to_pm[]{ -0.845157467344504, - 0.534513733550073, - 0.00198091852032335, - 0.781284637271869,
		0.403251168533375, - 0.635167604402343, - 0.658749276579685, - 0.752794893570788,
		0.350852320026947, - 0.5575456779172,0.752359931527164,0.428527346872256,
		0,0,0,1 };
	const double axis_distance[]{ 0.15,0.87,0.96,0.42617682954868,0.599370266248722,0.785593367378141 };


	for (int i = 0; i < 6; ++i) result[i]=s_sov_axis_distance(from_pm, to_pm, i);
	if (!s_is_equal(6, axis_distance, result, error))std::cout << "\"s_sov_axis_distance\" failed" << std::endl;
	
}

void test_kernel()
{
	std::cout << std::endl << "-----------------test kernel--------------------" << std::endl;

	//test isEqual
	{
		double a[] = { 0.1,0.2,0.3 };
		double b[] = { 0.1,0.2,0.3 };
		double c[] = { 0.1,0.2,0.35 };

		if (!s_is_equal(3, a, b, error))
		{
			std::cout << "\"isEqual\" failed" << std::endl;
		}

		if (s_is_equal(3, a, c, error))
		{
			std::cout << "\"isEqual\" failed" << std::endl;
		}
	}

	test_blk();
	test_mtx_solver();
	test_mtx_and_vec();
	test_pm_operation();
	test_cross();
	test_transform();
	test_variable_change();
	test_coordinate_transform();
	test_solve();

	std::cout << "-----------------test kernel finished-----------" << std::endl << std::endl;
}