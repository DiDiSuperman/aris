#include "test_dynamic_matrix.h"
#include <iostream>
#include <aris.h>

using namespace aris::dynamic;

const double error = 1e-10;


void test_mtx_basic_operation()
{
	//test isEqual
	{
		double a[] = { 0.1,0.2,0.3 };
		double b[] = { 0.1,0.2,0.3 };
		double c[] = { 0.1,0.2,0.35 };

		if (!s_is_equal(3, a, b, error))std::cout << "\"s_is_equal\" failed" << std::endl;
		if (s_is_equal(3, a, c, error))std::cout << "\"s_is_equal\" failed" << std::endl;

		double d[]{ 0.1,0.2,0.3,0.4,0.5,0.6 };
		double e[]{ 0.1,0.0,0.2,0.3,0.0,0.4,0.5,0.0,0.6 };
		if (!s_is_equal(3, d, 2, e, 3, error))std::cout << "\"s_is_equal\" failed" << std::endl;
		if (s_is_equal(3, d, 2, e + 1, 3, error))std::cout << "\"s_is_equal\" failed" << std::endl;

		double m1[]{ 0.1,0.2,0.3,
			0.4,0.5,0.6 };
		double m2[]{ 0.1,0.2,0.3,
			0.4,0.5,0.6 };
		double m3[]{ 0.1,0.2,0.31,
			0.4,0.5,0.6 };

		if (!s_is_equal(2, 3, m1, m2, error))std::cout << "\"s_is_equal mtx\" failed" << std::endl;
		if (s_is_equal(2, 3, m1, m3, error))std::cout << "\"s_is_equal mtx\" failed" << std::endl; 
		
		double m4[]{ 0.1,0.2,0.3,0.0,
			0.4,0.5,0.6,0.0 };
		double m5[]{ 0.1,0.2,0.3,0.0,0.0,
			0.4,0.5,0.6,0.0,0.0, };
		double m6[]{ 0.1,0.2,0.3,0.0,0.0,
			0.4,0.51,0.6,0.0,0.0, };

		if (!s_is_equal(2, 3, m4, 4, m5, 5, error))std::cout << "\"s_is_equal mtx\" failed" << std::endl;
		if (s_is_equal(2, 3, m4, 4, m6, 5, error))std::cout << "\"s_is_equal mtx\" failed" << std::endl;
	}

}
void test_mtx_and_vec()
{
	const double alpha{ 0.255095115459269 };
	const double v[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double v_ld[]{ 0.498364051982143,0,0,0.959743958516081,0,0,0.340385726666133,0,0,0.585267750979777,0,0,0.223811939491137,0,0,0.751267059305653,0,0 };
	const double r1[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0.149298944510773,0.0570933325456545,0.191644557234321 };
	const double r1_ld[]{ 0.127130235381134,0,0,0.244825995908996,0,0,0.0868307362445845,0,0,0.149298944510773,0,0,0.0570933325456545,0,0,0.191644557234321,0,0 };
	const double r2[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double r2_ld[]{ 0.498364051982143,0,0.959743958516081,0,0.340385726666133,0,0.585267750979777,0,0.223811939491137,0,0.751267059305653,0 };
	const double r3[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0.149298944510773,0.0570933325456545,0.191644557234321 };
	const double r3_ld[]{ 0.127130235381134,0,0.244825995908996,0,0.0868307362445845,0,0.149298944510773,0,0.0570933325456545,0,0.191644557234321,0 };
	const double r4[]{ 1.00432110364729,1.65882068117277,1.23128897920193,1.54455917618522,0.77102746945494,0.889891502134332 };
	double r4_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double r4_ld[]{ 1.00432110364729,0,1.65882068117277,0,1.23128897920193,0,1.54455917618522,0,0.77102746945494,0,0.889891502134332,0 };
	double r4_ld_before[]{ 0.505957051665142,0,0.699076722656686,0,0.890903252535799,0,0.959291425205444,0,0.547215529963803,0,0.138624442828679,0 };
	const double r5[]{ 0.633087287046276,0.943902718565682,0.977733988780383,1.10859036971622,0.604308862509458,0.330269000063 };
	double r5_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double r5_ld[]{ 0.633087287046276,0,0.943902718565682,0,0.977733988780383,0,1.10859036971622,0,0.604308862509458,0,0.330269000063,0 };
	double r5_ld_before[]{ 0.505957051665142,0,0.699076722656686,0,0.890903252535799,0,0.959291425205444,0,0.547215529963803,0,0.138624442828679,0 };

	const double v1[]{ 0.1,0.23,0.45,0.67,0.89 };
	const double v2[]{ -0.1,0.89,-0.45,0.67,0.12 };
	const double v1_ld[]{ 0.1,0,0.23,0,0.45,0,0.67,0,0.89,0 };
	const double v2_ld[]{ -0.1,0,0,0.89,0,0,-0.45,0,0,0.67,0,0,0.12,0,0 };
	double vv_result{ 0.5479 };


	double result[36];

	std::copy(v, v + 6, result);
	s_nv(6, alpha, result);
	if (!s_is_equal(6, result, r1, error))std::cout << "\"s_nv\" failed" << std::endl;

	std::copy(v_ld, v_ld + 18, result);
	s_nv(6, alpha, result, 3);
	if (!s_is_equal(18, result, r1_ld, error))std::cout << "\"s_nv with ld\" failed" << std::endl;

	std::fill(result, result + 36, 1.0);
	s_vc(6, v, result);
	if (!s_is_equal(6, result, r2, error))std::cout << "\"s_vc\" failed" << std::endl;

	std::fill(result, result + 36, 0);
	s_vc(6, v_ld, 3, result, 2);
	if (!s_is_equal(12, result, r2_ld, error))std::cout << "\"s_vc with ld\" failed" << std::endl;

	std::fill(result, result + 36, 1.0);
	s_vc(6, alpha, v, result);
	if (!s_is_equal(6, result, r3, error))std::cout << "\"s_vc\" failed" << std::endl;

	std::fill(result, result + 36, 0);
	s_vc(6, alpha, v_ld, 3, result, 2);
	if (!s_is_equal(12, result, r3_ld, error))std::cout << "\"s_vc with ld\" failed" << std::endl;

	s_va(6, v, r4_before);
	if (!s_is_equal(6, r4_before, r4, error))std::cout << "\"s_va\" failed" << std::endl;

	s_va(6, v_ld, 3, r4_ld_before, 2);
	if (!s_is_equal(12, r4_ld_before, r4_ld, error))std::cout << "\"s_va with ld\" failed" << std::endl;

	s_va(6, alpha, v, r5_before);
	if (!s_is_equal(6, r5_before, r5, error))std::cout << "\"s_va\" failed" << std::endl;

	s_va(6, alpha, v_ld, 3, r5_ld_before, 2);
	if (!s_is_equal(12, r5_ld_before, r5_ld, error))std::cout << "\"s_va with ld\" failed" << std::endl;

	result[0] = s_vv(5, v1, v2);
	if (!s_is_equal(1, result, &vv_result, error))std::cout << "\"s_vv\" failed" << std::endl;

	result[0] = s_vv(5, v1_ld, 2, v2_ld, 3);
	if (!s_is_equal(1, result, &vv_result, error))std::cout << "\"s_vv with ld\" failed" << std::endl;


	const double m1[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double o1[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0.149298944510773,0.0570933325456545,0.191644557234321 };
	const double m2[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double o2[]{ 0.127130235381134,0.244825995908996,0.0868307362445845,0,0,0,0.149298944510773,0.0570933325456545,0.191644557234321,0,0,0 };

	const double m2_ld[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0 };
	const double m1T[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m2T_ld[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };

	const double m3[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double o3[]{ 1.00432110364729,1.65882068117277,1.23128897920193,1.54455917618522,0.77102746945494,0.889891502134332 };
	double o3_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m4[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0 };
	const double o4[]{ 1.00432110364729,1.65882068117277,1.23128897920193,0,1.54455917618522,0.77102746945494,0.889891502134332,0 };
	double o4_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };
	const double m5[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double o5[]{ 0.633087287046276,0.943902718565682,0.977733988780383,1.10859036971622,0.604308862509458,0.330269000063 };
	double o5_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m6[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0 };
	const double o6[]{ 0.633087287046276,0.943902718565682,0.977733988780383,0,1.10859036971622,0.604308862509458,0.330269000063,0 };
	double o6_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };

	const double m3T[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	double o3T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m4T[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	double o4T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };
	const double m5T[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	double o5T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0.959291425205444,0.547215529963803,0.138624442828679 };
	const double m6T[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	double o6T_before[]{ 0.505957051665142,0.699076722656686,0.890903252535799,0,0.959291425205444,0.547215529963803,0.138624442828679,0 };

	const double m7a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m7b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o7[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m8a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m8b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o8[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m9a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m9b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o9[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m10a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m10b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o10[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };

	const double m11a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m11b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o11[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m12a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m12b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o12[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m13a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m13b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double o13[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m14a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m14b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double o14[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };

	const double m15a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m15b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o15[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m16a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m16b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o16[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m17a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double m17b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o17[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m18a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double m18b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o18[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };

	const double m19a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m19b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o19[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827 };
	const double m20a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m20b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o20[]{ 1.31858183661872,1.09529802045975,0.989581394872564,0.962509892352645,0,0.774959561865027,0.749377875701963,1.0047379842151,1.32916821737827,0 };
	const double m21a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double m21b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double o21[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901 };
	const double m22a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double m22b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double o22[]{ 0.336363785854748,0.27940517499149,0.252437380181361,0.245531572120387,0,0.197688398910224,0.191162635724814,0.256303752089665,0.339064319876901,0 };


	std::copy(m1, m1 + 6, result);
	s_nm(2, 3, alpha, result);
	if (!s_is_equal(6, result, o1, error))std::cout << "\"s_nm\" failed" << std::endl;

	std::copy(m2, m2 + 12, result);
	s_nm(2, 3, alpha, result, 6);
	if (!s_is_equal(12, result, o2, error))std::cout << "\"s_nm with ld\" failed" << std::endl;

	s_mc(2, 3, m1, result);
	if (!s_is_equal(6, result, m1, error))std::cout << "\"s_mc\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mc(2, 3, m2_ld, 5, result, 6);
	if (!s_is_equal(12, result, m2, error))std::cout << "\"s_mc with ld\" failed" << std::endl;

	s_mc(2, 3, alpha, m1, result);
	if (!s_is_equal(6, result, o1, error))std::cout << "\"s_mc\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mc(2, 3, alpha, m2_ld, 5, result, 6);
	if (!s_is_equal(12, result, o2, error))std::cout << "\"s_mc with ld\" failed" << std::endl;

	s_mcT(2, 3, m1T, result);
	if (!s_is_equal(6, result, m1, error))std::cout << "\"s_mcT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mc(2, 3, m2T_ld, ColMajor{ 5 }, result, 6);
	if (!s_is_equal(12, result, m2, error))std::cout << "\"s_mcT with ld\" failed" << std::endl;

	s_mcT(2, 3, alpha, m1T, result);
	if (!s_is_equal(6, result, o1, error))std::cout << "\"s_mcT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mc(2, 3, alpha, m2T_ld, ColMajor{ 5 }, result, 6);
	if (!s_is_equal(12, result, o2, error))std::cout << "\"s_mcT with ld\" failed" << std::endl;

	s_ma(2, 3, m3, o3_before);
	if (!s_is_equal(6, o3, o3_before, error))std::cout << "\"s_ma\" failed" << std::endl;

	s_ma(2, 3, m4, 5, o4_before, 4);
	if (!s_is_equal(8, o4, o4_before, error))std::cout << "\"s_ma with ld\" failed" << std::endl;

	s_ma(2, 3, alpha, m5, o5_before);
	if (!s_is_equal(6, o5, o5_before, error))std::cout << "\"s_ma\" failed" << std::endl;

	s_ma(2, 3, alpha, m6, 5, o6_before, 4);
	if (!s_is_equal(8, o6, o6_before, error))std::cout << "\"s_ma with ld\" failed" << std::endl;

	s_maT(2, 3, m3T, o3T_before);
	if (!s_is_equal(6, o3, o3T_before, error))std::cout << "\"s_maT\" failed" << std::endl;

	s_ma(2, 3, m4T, ColMajor{ 5 }, o4T_before, 4);
	if (!s_is_equal(8, o4, o4T_before, error))std::cout << "\"s_maT with ld\" failed" << std::endl;

	s_maT(2, 3, alpha, m5T, o5T_before);
	if (!s_is_equal(6, o5, o5T_before, error))std::cout << "\"s_maT\" failed" << std::endl;

	s_ma(2, 3, alpha, m6T, ColMajor{ 5 }, o6T_before, 4);
	if (!s_is_equal(8, o6, o6T_before, error))std::cout << "\"s_maT with ld\" failed" << std::endl;

	s_mm(2, 4, 3, m7a, m7b, result);
	if (!s_is_equal(8, o7, result, error))std::cout << "\"s_mm\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, m8a, 6, m8b, 6, result, 5);
	if (!s_is_equal(10, o8, result, error))std::cout << "\"s_mm with ld\" failed" << std::endl;

	s_mm(2, 4, 3, alpha, m9a, m9b, result);
	if (!s_is_equal(8, o9, result, error))std::cout << "\"s_mm\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, alpha, m10a, 6, m10b, 6, result, 5);
	if (!s_is_equal(10, o10, result, error))std::cout << "\"s_mm with ld\" failed" << std::endl;

	s_mmTN(2, 4, 3, m11a, m11b, result);
	if (!s_is_equal(8, o11, result, error))std::cout << "\"s_mmTN\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, m12a, ColMajor{ 5 }, m12b, 6, result, 5);
	if (!s_is_equal(10, o12, result, error))std::cout << "\"s_mmTN with ld\" failed" << std::endl;

	s_mmTN(2, 4, 3, alpha, m13a, m13b, result);
	if (!s_is_equal(8, o13, result, error))std::cout << "\"s_mmTN\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, alpha, m14a, ColMajor{ 5 }, m14b, 6, result, 5);
	if (!s_is_equal(10, o14, result, error))std::cout << "\"s_mmTN with ld\" failed" << std::endl;

	s_mmNT(2, 4, 3, m15a, m15b, result);
	if (!s_is_equal(8, o15, result, error))std::cout << "\"s_mmNT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, m16a, 6, m16b, ColMajor{ 5 }, result, 5);
	if (!s_is_equal(10, o16, result, error))std::cout << "\"s_mmNT with ld\" failed" << std::endl;

	s_mmNT(2, 4, 3, alpha, m17a, m17b, result);
	if (!s_is_equal(8, o17, result, error))std::cout << "\"s_mmNT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, alpha, m18a, 6, m18b, ColMajor{ 5 }, result, 5);
	if (!s_is_equal(10, o18, result, error))std::cout << "\"s_mmNT with ld\" failed" << std::endl;

	s_mmTT(2, 4, 3, m19a, m19b, result);
	if (!s_is_equal(8, o19, result, error))std::cout << "\"s_mmTT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, m20a, ColMajor{ 5 }, m20b, ColMajor{ 5 }, result, 5);
	if (!s_is_equal(10, o20, result, error))std::cout << "\"s_mmTT with ld\" failed" << std::endl;

	s_mmTT(2, 4, 3, alpha, m21a, m21b, result);
	if (!s_is_equal(8, o21, result, error))std::cout << "\"s_mmTT\" failed" << std::endl;

	std::fill_n(result, 36, 0);
	s_mm(2, 4, 3, alpha, m22a, ColMajor{ 5 }, m22b, ColMajor{ 5 }, result, 5);
	if (!s_is_equal(10, o22, result, error))std::cout << "\"s_mmTT with ld\" failed" << std::endl;

	const double ma01a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma01b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa01[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa01_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma02a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma02b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa02[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa02_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma03a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma03b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa03[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa03_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma04a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma04b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa04[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa04_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	const double ma05a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma05b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa05[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa05_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma06a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma06b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa06[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa06_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma07a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma07b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616 };
	const double oa07[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa07_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma08a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma08b[]{ 0.814723686393179,0.913375856139019,0.278498218867048,0.964888535199277,0,0,0.905791937075619,0.63235924622541,0.546881519204984,0.157613081677548,0,0,0.126986816293506,0.0975404049994095,0.957506835434298,0.970592781760616,0,0 };
	const double oa08[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa08_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	const double ma09a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma09b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa09[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa09_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma10a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma10b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa10[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa10_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma11a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0.585267750979777,0.223811939491137,0.751267059305653 };
	const double ma11b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa11[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa11_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma12a[]{ 0.498364051982143,0.959743958516081,0.340385726666133,0,0,0,0.585267750979777,0.223811939491137,0.751267059305653,0,0,0 };
	const double ma12b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa12[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa12_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	const double ma13a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma13b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa13[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827 };
	double oa13_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma14a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma14b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa14[]{ 2.31858183661872,3.09529802045975,3.989581394872564,4.962509892352645,0,5.774959561865027,6.749377875701963,8.0047379842151,9.32916821737827,0 };
	double oa14_before[]{ 1,2,3,4,0,5,6,7,8,0 };
	const double ma15a[]{ 0.498364051982143,0.585267750979777,0.959743958516081,0.223811939491137,0.340385726666133,0.751267059305653 };
	const double ma15b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0.913375856139019,0.63235924622541,0.0975404049994095,0.278498218867048,0.546881519204984,0.957506835434298,0.964888535199277,0.157613081677548,0.970592781760616 };
	const double oa15[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901 };
	double oa15_before[]{ 1,2,3,4,5,6,7,8 };
	const double ma16a[]{ 0.498364051982143,0.585267750979777,0,0,0,0.959743958516081,0.223811939491137,0,0,0,0.340385726666133,0.751267059305653,0,0,0 };
	const double ma16b[]{ 0.814723686393179,0.905791937075619,0.126986816293506,0,0,0.913375856139019,0.63235924622541,0.0975404049994095,0,0,0.278498218867048,0.546881519204984,0.957506835434298,0,0,0.964888535199277,0.157613081677548,0.970592781760616,0,0 };
	const double oa16[]{ 1.336363785854748,2.27940517499149,3.252437380181361,4.245531572120387,0,5.197688398910224,6.191162635724814,7.256303752089665,8.339064319876901,0 };
	double oa16_before[]{ 1,2,3,4,0,5,6,7,8,0 };

	s_mma(2, 4, 3, ma01a, ma01b, oa01_before);
	if (!s_is_equal(8, oa01_before, oa01, error))std::cout << "\"s_mma\" failed" << std::endl;

	s_mma(2, 4, 3, ma02a, 6, ma02b, 6, oa02_before, 5);
	if (!s_is_equal(10, oa02_before, oa02, error))std::cout << "\"s_mma with ld\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma03a, ma03b, oa03_before);
	if (!s_is_equal(8, oa03_before, oa03, error))std::cout << "\"s_mma\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma04a, 6, ma04b, 6, oa04_before, 5);
	if (!s_is_equal(10, oa04_before, oa04, error))std::cout << "\"s_mma with ld\" failed" << std::endl;

	s_mmaTN(2, 4, 3, ma05a, ma05b, oa05_before);
	if (!s_is_equal(8, oa05_before, oa05, error))std::cout << "\"s_mmaTN\" failed" << std::endl;

	s_mma(2, 4, 3, ma06a, ColMajor{ 5 }, ma06b, RowMajor{ 6 }, oa06_before, RowMajor{ 5 });
	if (!s_is_equal(10, oa06_before, oa06, error))std::cout << "\"s_mmaTN with ld\" failed" << std::endl;

	s_mmaTN(2, 4, 3, alpha, ma07a, ma07b, oa07_before);
	if (!s_is_equal(8, oa07_before, oa07, error))std::cout << "\"s_mmaTN\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma08a, ColMajor{ 5 }, ma08b, RowMajor{ 6 }, oa08_before, RowMajor{ 5 });
	if (!s_is_equal(10, oa08_before, oa08, error))std::cout << "\"s_mmaTN with ld\" failed" << std::endl;

	s_mmaNT(2, 4, 3, ma09a, ma09b, oa09_before);
	if (!s_is_equal(8, oa09_before, oa09, error))std::cout << "\"s_mmaNT\" failed" << std::endl;

	s_mma(2, 4, 3, ma10a, RowMajor{ 6 }, ma10b, ColMajor{ 5 }, oa10_before, RowMajor{ 5 });
	if (!s_is_equal(10, oa06_before, oa10, error))std::cout << "\"s_mmaNT with ld\" failed" << std::endl;

	s_mmaNT(2, 4, 3, alpha, ma11a, ma11b, oa11_before);
	if (!s_is_equal(8, oa11_before, oa11, error))std::cout << "\"s_mmaNT\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma12a, RowMajor{ 6 }, ma12b, ColMajor{ 5 }, oa12_before, RowMajor{ 5 });
	if (!s_is_equal(10, oa12_before, oa12, error))std::cout << "\"s_mmaNT with ld\" failed" << std::endl;

	s_mmaTT(2, 4, 3, ma13a, ma13b, oa13_before);
	if (!s_is_equal(8, oa13_before, oa13, error))std::cout << "\"s_mmaTT\" failed" << std::endl;

	s_mma(2, 4, 3, ma14a, ColMajor{ 5 }, ma14b, ColMajor{ 5 }, oa14_before, RowMajor{ 5 });
	if (!s_is_equal(10, oa14_before, oa14, error))std::cout << "\"s_mmaTT with ld\" failed" << std::endl;

	s_mmaTT(2, 4, 3, alpha, ma15a, ma15b, oa15_before);
	if (!s_is_equal(8, oa15_before, oa15, error))std::cout << "\"s_mmaTT\" failed" << std::endl;

	s_mma(2, 4, 3, alpha, ma16a, ColMajor{ 5 }, ma16b, ColMajor{ 5 }, oa16_before, RowMajor{ 5 });
	if (!s_is_equal(10, oa16_before, oa16, error))std::cout << "\"s_mmaTT with ld\" failed" << std::endl;
}
void test_mtx_householder() 
{
	{
		const int m{ 5 }, n{ 6 }, rhs{ 2 };
		const int a_t{ 7 }, q_t{ 8 }, r_t{ 10 }, u_t{ 9 }, tau_t{ 2 }, b_t{ 4 }, x_t{ 5 };

		const double A[]{ 
			0.8147,0.0975,0.1576,0.1419,0.6557,0.7577,
			0.9058,0.2785,0.9706,0.4218,0.0357,0.7431,
			0.1270,0.5469,0.9572,0.9157,0.8491,0.3922,
			0.9134,0.9575,0.4854,0.7922,0.9340,0.6555,
			0.6324,0.9649,0.8003,0.9595,0.6787,0.1712, };
		const double Q[]{
			-0.492666858742303, -0.480667841387474,0.177953454506114,0.656659986061627,0.25173006035788,
			-0.547757015648433, -0.358349168353002, -0.57774356601946, -0.475777233310347, -0.106754491874129,
			-0.0767996698910918,0.475432019801101, -0.634320532325754,0.554658862728443, -0.240950645401142,
			-0.552352901405695,0.339054939876482,0.480845521478708, -0.0718314601196047, -0.586153432016755,
			-0.382426072749027,0.547312015298238,0.0311446094260189, -0.172126332392726,0.723603756065892,};
		const double R[]{
			-1.65365294121832, - 1.14046790774039, - 1.25697758470928, - 1.1757905794716, - 1.18325736992819, - 1.23799141825475,
			0,0.966094882200634,0.634107648406748,1.0097398566765,0.763860337732694, - 0.128076522148321,
			0,0,-0.881556607241129, - 0.388478877543586,0.0277046342935185 ,- 0.222740227744911,
			0,0,0,0.178338236974704,0.700634820427496,0.284984865114035,
			0,0,0,0,-0.0997003640550825,-0.243436850953329,};
		const double U[]{
			-1.65365294121832, - 1.14046790774039, - 1.25697758470928, - 1.1757905794716, - 1.18325736992819, - 1.23799141825475,
			0.366965349595799,0.966094882200634,0.634107648406748,1.0097398566765,0.763860337732694, - 0.128076522148321,
			0.0514513130919259, - 0.423163816226815, - 0.881556607241129, - 0.388478877543586,0.0277046342935185, - 0.222740227744911,
			0.370044325812324, - 0.437343928487383, - 0.0698283162531727,0.178338236974704,0.700634820427497,0.284984865114035,
			0.256203231490819, - 0.567244456473452,0.197960951688692,0.489745227556259, - 0.0997003640550822, - 0.243436850953329};
		const double tau[]{
			-1.4926668587423,
			- 1.18196072589879,
			- 1.91559040502267,
			- 1.61309785397955};
		const double b[]{ 0.4387,0.4898,
			0.3816,0.4456,
			0.7655,0.6463,
			0.7952,0.7094,
			0.1869,0.7547 };
		const double x[]{ -2.75456661995493,0.868590789483354,
			7.99831100006118, - 1.88123572093792,
			7.05877107200108, - 1.35425833135642,
			- 15.0821489767352,3.59223425153636,
			4.4695817014224, - 0.504388227347691,
			0, 0};
		
		const double A_ld[]{
			0.8147,0.0975,0.1576,0.1419,0.6557,0.7577,0,
			0.9058,0.2785,0.9706,0.4218,0.0357,0.7431,0,
			0.1270,0.5469,0.9572,0.9157,0.8491,0.3922,0,
			0.9134,0.9575,0.4854,0.7922,0.9340,0.6555,0,
			0.6324,0.9649,0.8003,0.9595,0.6787,0.1712,0 };
		const double Q_ld[]{
			-0.492666858742303,-0.480667841387474,0.177953454506114,0.656659986061627,0.25173006035788,0,0,0,
			-0.547757015648433,-0.358349168353002,-0.57774356601946,-0.475777233310347,-0.106754491874129,0,0,0,
			-0.0767996698910918,0.475432019801101,-0.634320532325754,0.554658862728443,-0.240950645401142,0,0,0,
			-0.552352901405695,0.339054939876482,0.480845521478708,-0.0718314601196047,-0.586153432016755,0,0,0,
			-0.382426072749027,0.547312015298238,0.0311446094260189,-0.172126332392726,0.723603756065892,0,0,0 };
		const double R_ld[]{
			-1.65365294121832, -1.14046790774039, -1.25697758470928, -1.1757905794716, -1.18325736992819, -1.23799141825475,0,0,0,0,
			0,0.966094882200634,0.634107648406748,1.0097398566765,0.763860337732694, -0.128076522148321,0,0,0,0,
			0,0,-0.881556607241129, -0.388478877543586,0.0277046342935185 ,-0.222740227744911,0,0,0,0,
			0,0,0,0.178338236974704,0.700634820427496,0.284984865114035,0,0,0,0,
			0,0,0,0,-0.0997003640550825,-0.243436850953329,0,0,0,0 };
		const double U_ld[]{
			-1.65365294121832, -1.14046790774039, -1.25697758470928, -1.1757905794716, -1.18325736992819, -1.23799141825475,0,0,0,
			0.366965349595799,0.966094882200634,0.634107648406748,1.0097398566765,0.763860337732694, -0.128076522148321,0,0,0,
			0.0514513130919259, -0.423163816226815, -0.881556607241129, -0.388478877543586,0.0277046342935185, -0.222740227744911,0,0,0,
			0.370044325812324, -0.437343928487383, -0.0698283162531727,0.178338236974704,0.700634820427497,0.284984865114035,0,0,0,
			0.256203231490819, -0.567244456473452,0.197960951688692,0.489745227556259, -0.0997003640550822, -0.243436850953329,0,0,0 };
		const double tau_ld[]{
			-1.4926668587423,0,
			-1.18196072589879,0,
			-1.91559040502267,0,
			-1.61309785397955,0,
			0.0, 0 };
		const double b_ld[]{ 0.4387,0.4898,0,0,
			0.3816,0.4456,0,0,
			0.7655,0.6463,0,0,
			0.7952,0.7094,0,0,
			0.1869,0.7547,0,0 };
		const double x_ld[]{ -2.75456661995493,0.868590789483354,0,0,0,
			7.99831100006118, -1.88123572093792,0,0,0,
			7.05877107200108, -1.35425833135642,0,0,0,
			-15.0821489767352,3.59223425153636,0,0,0,
			4.4695817014224, -0.504388227347691,0,0,0,
			0,0,0,0,0 };

		double result_Q[m*m], result_R[m*n], result_U[m*n], result_tau[std::max(m, n)], result_x[std::max(m, n)*rhs];
		double result_Q_ld[m*q_t], result_R_ld[m*r_t], result_U_ld[m*u_t], result_tau_ld[n*tau_t], result_x_ld[std::max(m, n)*x_t];
		
		s_householder_ut(m, n, A, result_U, result_tau);
		if (!(s_is_equal(m, n, result_U, U, error) && s_is_equal(std::min(m - 1, n), result_tau, tau, error)))std::cout << "\"s_householder\" failed" << std::endl;

		s_householder_ut(m, n, A_ld, a_t, result_U_ld, u_t, result_tau_ld, tau_t);
		if (!(s_is_equal(m, n, result_U_ld, u_t, U_ld, u_t, error) && s_is_equal(std::min(m - 1, n), 1, result_tau_ld, tau_t, tau_ld, tau_t, error)))std::cout << "\"s_householder_ut\" failed" << std::endl;

		s_householder_ut2qr(m, n, U, tau, result_Q, result_R);
		if (!(s_is_equal(m, m, result_Q, Q, error) && s_is_equal(m, n, result_R, R, error)))std::cout << "\"s_householder_ut2qr\" failed" << std::endl;

		s_householder_ut2qr(m, n, U_ld, u_t, tau_ld, tau_t, result_Q_ld, q_t, result_R_ld, r_t);
		if (!(s_is_equal(m, m, result_Q_ld, q_t, Q_ld, q_t, error) && s_is_equal(m, n, result_R_ld, r_t, R_ld, r_t, error)))std::cout << "\"s_householder_ut2qr\" failed" << std::endl;

		s_householder_ut_sov(m, n, 2, U, tau, b, result_x);
		if (!(s_is_equal(n, rhs, result_x, x, error)))std::cout << "\"s_householder_ut_sov\" failed" << std::endl;

		s_householder_ut_sov(m, n, rhs, U_ld, u_t, tau_ld, tau_t, b_ld, b_t, result_x_ld, x_t);
		if (!(s_is_equal(n, rhs, result_x_ld, x_t, x_ld, x_t, error)))std::cout << "\"s_householder_ut_sov\" failed" << std::endl;
	}
	{
		const aris::Size m{ 6 }, n{ 5 }, rhs{ 2 };
		const aris::Size a_t{ 9 }, q_t{ 8 }, r_t{ 6 }, u_t{ 7 }, tau_t{ 2 }, b_t{ 4 }, x_t{ 3 };
		const double A[]{ 0.8147,0.9058, 0.127,0.9134,0.6324,
			0.0975,0.2785,0.5469,0.9575,0.9649,
			0.1576,0.9706,0.9572,0.4854,0.8003,
			0.1419,0.4218,0.9157,0.7922,0.9595,
			0.6557,0.0357,0.8491, 0.934,0.6787,
			0.7577,0.7431,0.3922,0.6555,0.1712 };
		const double Q[]{
			-0.6207938622228, - 0.154560758796689,0.479344322039396, - 0.321468254294596, 0.500625274984451, 0.0835910815985244,
			- 0.07429409790932, - 0.17707859766604, - 0.287176127497771, - 0.79778986158619, - 0.321450823922257, - 0.37530538713139,
			- 0.120089741851373, - 0.771426698803364, - 0.254652968468967, 0.386622567240651, 0.169145687493211, - 0.384114429341121,
			- 0.108126487111103, - 0.273077416783337, - 0.506838341291211, - 0.139647719197317, 0.0441331940078665, 0.797121733949575,
			- 0.499637333324524,   0.521984537055711, - 0.580180031408702, 0.157727038950421, 0.239035801052366, - 0.243454053933954,
			- 0.57736038959889, - 0.0511454590343965, 0.171513222014195, 0.257552294569938, - 0.747226595652759, 0.0997074095924538 };
		const double R[]{
			-1.31235189259588, - 1.19204640068418, - 0.984116392323211, - 1.62724008099373, - 1.10207955515584,
			0, - 1.07261967566136, - 0.681782306693105, - 0.447503294312055, - 0.80248312849391,
			0,0, - 1.22940896476355, - 0.79172515549949, - 1.02847417900777,
			0,0,0, - 0.664332641480675, - 0.646519613301525,
			0,0,0,0,0.218449022247435,
			0,0,0,0,0 };
		const double U[]{
			-1.31235189259588, - 1.19204640068418, - 0.984116392323211, - 1.62724008099373,-1.10207955515584,
			0.0458380918394095, - 1.07261967566136, - 0.681782306693105, - 0.447503294312055,-0.802483128493911,
			0.0740931617834968,0.64955454096634, - 1.22940896476355, - 0.79172515549949,- 1.02847417900777,
			0.0667120536616637,0.224587809775278,0.43088167987985, - 0.664332641480675,- 0.646519613301525,
			0.30826704429847, - 0.486866265436373,0.806399797389196,0.64673735967616,0.218449022247434,
			0.356220740376622, - 0.00334385430562029,0.000250527139268941, - 0.275874736646322,0.711610030647557 };
		const double tau[]{
			-1.6207938622228,
			- 1.16999382740955,
			- 1.08936038603983,
			- 1.33835118423397,
			- 1.32767845364868,
			0 };
		const double b[]{
			0.5060,0.1493,
			0.6991,0.2575,
			0.8909,0.8407,
			0.9593,0.2543,
			0.5472,0.8143,
			0.1386,0.2435
		};
		const double x[]{
			0.209748905164346, 0.947708395923203,
			0.072279163615098, -0.200871645791878,
			0.169848963487236, 0.699653165641312,
			-0.524722596591983, -1.04635860123482,
			1.13918462877824,0.723696504731286,
		};
		const double A_ld[]{ 0.8147,0.9058, 0.127,0.9134,0.6324,0,0,0,0,
			0.0975,0.2785,0.5469,0.9575,0.9649,0,0,0,0,
			0.1576,0.9706,0.9572,0.4854,0.8003,0,0,0,0,
			0.1419,0.4218,0.9157,0.7922,0.9595,0,0,0,0,
			0.6557,0.0357,0.8491, 0.934,0.6787,0,0,0,0,
			0.7577,0.7431,0.3922,0.6555,0.1712,0,0,0,0 };
		const double Q_ld[]{
			-0.6207938622228, -0.154560758796689,0.479344322039396, -0.321468254294596, 0.500625274984451, 0.0835910815985244,0,0,
			-0.07429409790932, -0.17707859766604, -0.287176127497771, -0.79778986158619, -0.321450823922257, -0.37530538713139,0,0,
			-0.120089741851373, -0.771426698803364, -0.254652968468967, 0.386622567240651, 0.169145687493211, -0.384114429341121,0,0,
			-0.108126487111103, -0.273077416783337, -0.506838341291211, -0.139647719197317, 0.0441331940078665, 0.797121733949575,0,0,
			-0.499637333324524,   0.521984537055711, -0.580180031408702, 0.157727038950421, 0.239035801052366, -0.243454053933954,0,0,
			-0.57736038959889, -0.0511454590343965, 0.171513222014195, 0.257552294569938, -0.747226595652759, 0.0997074095924538,0,0 };
		const double R_ld[]{
			-1.31235189259588, -1.19204640068418, -0.984116392323211, -1.62724008099373, -1.10207955515584,0,
			0, -1.07261967566136, -0.681782306693105, -0.447503294312055, -0.80248312849391,0,
			0,0, -1.22940896476355, -0.79172515549949, -1.02847417900777,0,
			0,0,0, -0.664332641480675, -0.646519613301525,0,
			0,0,0,0,0.218449022247435,0,
			0,0,0,0,0,0 };
		const double U_ld[]{
			-1.31235189259588, -1.19204640068418, -0.984116392323211, -1.62724008099373,-1.10207955515584,0,0,
			0.0458380918394095, -1.07261967566136, -0.681782306693105, -0.447503294312055,-0.802483128493911,0,0,
			0.0740931617834968,0.64955454096634, -1.22940896476355, -0.79172515549949,-1.02847417900777,0,0,
			0.0667120536616637,0.224587809775278,0.43088167987985, -0.664332641480675,-0.646519613301525,0,0,
			0.30826704429847, -0.486866265436373,0.806399797389196,0.64673735967616,0.218449022247434,0,0,
			0.356220740376622, -0.00334385430562029,0.000250527139268941, -0.275874736646322,0.711610030647557,0,0 };
		const double tau_ld[]{
			-1.6207938622228,0,
			-1.16999382740955,0,
			-1.08936038603983,0,
			-1.33835118423397,0,
			-1.32767845364868,0,
			0,0 };
		const double b_ld[]{
			0.5060,0.1493,0,0,
			0.6991,0.2575,0,0,
			0.8909,0.8407,0,0,
			0.9593,0.2543,0,0,
			0.5472,0.8143,0,0,
			0.1386,0.2435,0,0
		};
		const double x_ld[]{
			0.209748905164346, 0.947708395923203,0,
			0.072279163615098, -0.200871645791878,0,
			0.169848963487236, 0.699653165641312,0,
			-0.524722596591983, -1.04635860123482,0,
			1.13918462877824,0.723696504731286,0,
		};

		double result_Q[m*m], result_R[m*n], result_U[m*n], result_tau[std::max(m, n)], result_x[std::max(m, n)*rhs];
		double result_Q_ld[m*q_t], result_R_ld[m*r_t], result_U_ld[m*u_t], result_tau_ld[n*tau_t], result_x_ld[std::max(m, n)*x_t];

		s_householder_ut(m, n, A, result_U, result_tau);
		if (!(s_is_equal(m, n, result_U, U, error) && s_is_equal(std::min(m - 1, n), result_tau, tau, error)))std::cout << "\"s_householder\" failed" << std::endl;

		s_householder_ut(m, n, A_ld, a_t, result_U_ld, u_t, result_tau_ld, tau_t);
		if (!(s_is_equal(m, n, result_U_ld, u_t, U_ld, u_t, error) && s_is_equal(std::min(m - 1, n), 1, result_tau_ld, tau_t, tau_ld, tau_t, error)))std::cout << "\"s_householder_ut\" failed" << std::endl;

		s_householder_ut2qr(m, n, U, tau, result_Q, result_R);
		if (!(s_is_equal(m, m, result_Q, Q, error) && s_is_equal(m, n, result_R, R, error)))std::cout << "\"s_householder_ut2qr\" failed" << std::endl;

		s_householder_ut2qr(m, n, U_ld, u_t, tau_ld, tau_t, result_Q_ld, q_t, result_R_ld, r_t);
		if (!(s_is_equal(m, m, result_Q_ld, q_t, Q_ld, q_t, error) && s_is_equal(m, n, result_R_ld, r_t, R_ld, r_t, error)))std::cout << "\"s_householder_ut2qr\" failed" << std::endl;

		s_householder_ut_sov(m, n, rhs, U, tau, b, result_x);
		if (!(s_is_equal(n, rhs, result_x, x, error)))std::cout << "\"s_householder_ut_sov\" failed" << std::endl;

		s_householder_ut_sov(m, n, rhs, U_ld, u_t, tau_ld, tau_t, b_ld, b_t, result_x_ld, x_t);
		if (!(s_is_equal(n, rhs, result_x_ld, x_t, x_ld, x_t, error)))std::cout << "\"s_householder_ut_sov\" failed" << std::endl;
	}
	{
		const double A[]{
			0.8147,0.0975,0.1576,0.1576,0.1419,0.6557,0.7577,
			0.9058,0.2785,0.9706,0.9706,0.4218,0.0357,0.7431,
			0.1270,0.5469,0.9572,0.9572,0.9157,0.8491,0.3922,
			0.9134,0.9575,0.4854,0.4854,0.7922,0.9340,0.6555,
			0.6324,0.9649,0.8003,0.8003,0.9595,0.6787,0.1712, };
		const double Q[]{
			-0.0948773358166253,0.643788426808788, - 0.26565586289479,0.623844656413208,0.341730244242027,
			- 0.58431435370315,0.161525647307452,0.759146932432025,0.162329118840955, - 0.172717669836485,
			- 0.576247372104528, - 0.549539177186544, - 0.443990644965815,0.378269272853271, - 0.160406743242476,
			- 0.292217378206789,0.506663027198883, - 0.380278945401033, - 0.40581435894137, - 0.590427142419196,
			- 0.481791445774398,0.0272982852167241, - 0.106691744554997, - 0.526017266953346,0.692137640150848 };
		const double R[]{
			-1.66109217384226, -1.2513481868932, -1.17228562066834, -1.23181048121313, -1.00612795985559, -1.66109217384226, -1.48137010621644,
			0,1.08106233176403,0.453035435298651,0.318681252334209,0.729090014972595, -1.84850895969006e-16,0.0838432260611339,
			0,0, -0.951673682486806, -0.524361464224333, -0.0788369681589307,1.57044156390443e-16, -0.527678333887358,
			0,0,0, -0.583212330648697,0.385605604799574, -2.68241982650568e-16, -0.322824550571199,
			0,0,0,0, -0.200860046954965, -1.32073243058147e-16,0.0251244372340313 };
		const double U[]{
			-1.66109217384226, - 1.2513481868932, - 1.17228562066834, - 1.23181048121313, - 1.00612795985559, - 1.66109217384226, - 1.48137010621644,
			0.53368019830946,   1.08106233176404,   0.453035435298651,   0.318681252334209,   0.729090014972595, - 3.00456643800883e-17,   0.0838432260611339,
			0.52631226645561,   0.751551799774309, - 0.951673682486806, - 0.524361464224333, - 0.0788369681589305,   8.39819003604803e-17, - 0.527678333887358,
			0.266895083720804, - 0.283269438372039,   0.0273426548714987, - 0.583212330648697,   0.385605604799574, - 1.39588000131752e-16, - 0.322824550571199,
			0.440041482286278,   0.216568678266439,   0.093326192035841,   0.479979575495156, - 0.200860046954965, - 1.71137337304146e-17,   0.0251244372340313 };
		const double tau[]{
			-1.09487733581663,
			- 1.1820514879812,
			- 1.98126241106226,
			- 1.62551354975528,
			0.0};
		const int P[]{ 1,2,3,4,5 };

		const int m{ 5 }, n{ 7 };
		double result_Q[m*m], result_R[m*n], result_U[m*n], result_tau[std::max(m, n)];
		aris::Size result_P[n];

		s_householder_colpiv(m, n, A, result_U, result_tau, result_P);
		if (!(s_is_equal(m*n, result_U, U, error) && s_is_equal(std::min(m - 1, n), result_tau, tau, error)))std::cout << "\"s_householder\" failed" << std::endl;

		s_householder_colpiv_qr(m, n, A, result_Q, result_R, result_tau, result_P);
		if (!(s_is_equal(m*m, result_Q, Q, error) && s_is_equal(m*n, result_R, R, error)))std::cout << "\"s_householder_qr\" failed" << std::endl;
	}
	{
		const int m{ 6 };
		
		const double A[]{ 1.82553083943141,1.42060601118548,1.36736238745112,1.50658906468564,1.86464891726001,1.04079482779702,
			1.42060601118548,2.10941693872417,1.92463386848915,1.23889223270807,2.23186828169132,1.22211204078486,
			1.36736238745112,1.92463386848915,2.06653199450749,1.37659815598197,2.07988145626914,1.30113287432829,
			1.50658906468564,1.23889223270807,1.37659815598197,1.69212820994619,1.67619205287543,0.914095057763804,
			1.86464891726001,2.23186828169132,2.07988145626914,1.67619205287543, 3.0881251584706,1.69495025317372,
			1.04079482779702,1.22211204078486,1.30113287432829,0.914095057763804,1.69495025317372,1.17872570447206 };

		const double Q[]{ -0.487018761004792,0.58615158818106,0.269169996030875,0.469225664315028,0.322931724090467, - 0.149428688219487,
			- 0.378992107117184, - 0.531014268871378,0.395414660684538, - 0.148366226025505,0.471255375679519,0.41706343520106,
			- 0.364787666905925, - 0.407154830432649, - 0.6218869826655,0.167150077035578,0.243911898269689, - 0.476423467672795,
			- 0.401930837747503,   0.418371584453535, - 0.382204354563855, - 0.6780304845932,0.0471261323067019,0.235351736679332,
			- 0.497454759885483, - 0.169067369137248,0.374748698253167, - 0.19092216761576, - 0.645437708327441, - 0.361216403696958,
			- 0.277665321530135, - 0.071109408646299, - 0.312945018579389,0.483424222133397, - 0.441961254720844,0.625205652044336 };

		const double R[]{ -3.74837888311545, -4.14093747425994, -4.09842122428956, -3.47319426928742, -5.19323931441872, -2.98254996581135,
			0, - 1.01698645699612, - 0.930158218823203,0.024279751808276, - 0.88037774250209, - 0.556605795615909,
			0,0, - 0.309959963166431, - 0.265333224503581,0.0771665208290705, - 0.128832887738307,
			0,0,0, - 0.272222060476389, - 0.0152612526957455,0.150968618871018,
			0,0,0,0, - 0.502060268034026, - 0.34246380747859,
			0,0,0,0,0,0.0741194013003414 };

		double result_U[m*m], result_tau[m];

		BlockSize blk_m{ 2,4 }, blk_n{ 2,4 };
		BlockMatrix blk_A, blk_U, blk_tau;

		s_blk_make(A, blk_m, blk_n, blk_A);
		s_blk_allocate(blk_m, blk_n, blk_U);
		s_blk_allocate(blk_m, {1}, blk_tau);

		s_blk_householder_ut(blk_m, blk_A, blk_U, blk_tau);

		s_blk_resolve(blk_m, blk_m, blk_U, result_U);

		//dsp(6, 6, result_U);

		//s_blk_make(A, m, k, a);
		//s_blk_make(AT, k, m, at);
		//s_blk_make(B, k, n, b);
		//s_blk_make(BT, n, k, bt);
	}


}
void test_mtx_solver()
{
	const double A[]{ 1.82553083943141,1.42060601118548,1.36736238745112,1.50658906468564,1.86464891726001,1.04079482779702,
		1.42060601118548,2.10941693872417,1.92463386848915,1.23889223270807,2.23186828169132,1.22211204078486,
		1.36736238745112,1.92463386848915,2.06653199450749,1.37659815598197,2.07988145626914,1.30113287432829,
		1.50658906468564,1.23889223270807,1.37659815598197,1.69212820994619,1.67619205287543,0.914095057763804,
		1.86464891726001,2.23186828169132,2.07988145626914,1.67619205287543, 3.0881251584706,1.69495025317372,
		1.04079482779702,1.22211204078486,1.30113287432829,0.914095057763804,1.69495025317372,1.17872570447206 };
	
	const double b[]{ 0.765516788149002,0.709364830858073,
		0.795199901137063,0.754686681982361,
		0.186872604554379,0.276025076998578,
		0.489764395788231,0.679702676853675,
		0.445586200710899,0.655098003973841,
		0.646313010111265,0.162611735194631 };

	const double bT[]{ 0.765516788149002,0.795199901137063,0.186872604554379,0.489764395788231,0.445586200710899,0.646313010111265,
		0.709364830858073,0.754686681982361,0.276025076998578,0.679702676853675,0.655098003973841,0.162611735194631 };

	const double llt[]{ 1.35112206681388,1.05142684445637,1.01201987669074,1.11506510158506,1.38007435675823,0.770318873002606,
		1.05142684445637,1.00195734913254,0.858887859606139,0.0663529756457487,0.779295701883798,0.411372898532454,
		1.01201987669074,0.858887859606139,0.551959607499983,0.346294079395723,0.025166983849247,0.30478983036659,
		1.11506510158506,0.0663529756457487,0.346294079395723,0.569592593325883,0.135000937041167, - 0.136419197085494,
		1.38007435675823,0.779295701883798,0.025166983849247,0.135000937041167,0.746565139312267,0.431332592509531,
		0.770318873002606,0.411372898532454,0.30478983036659,-0.136419197085494,0.431332592509531,0.344313858756401 };

	const double inv_l[]{ 0.740125577519527,0,0,0,0,0,
		-0.77666769064225,0.998046474598712,0,0,0,0,
		-0.148473446503069, -1.55303031002242,1.81172677567722,0,0,0,
		-1.26816697217082,0.827928336123375, -1.10147193494276,1.75564080663506,0,0,
		-0.323125426175609, -1.13916294185447,0.138104552985304, -0.31747149916724,1.3394678472681,0,
		-0.69415520561586,1.93742418585395, -2.21317495390761,1.09330166190531, -1.67799269315532,2.90432689410723 };

	const double inv_l_dot_b[]{ 0.566578554929674,0.525019055110873,
		0.19909430193153,0.202271637373723,
		-1.01006636357342,-0.777291110197726,
		0.341580853217506,0.614513319403422,
		-0.686050087570733,-0.389108108915027,
		2.26054438577134,0.474995191389852 };
	const double inv_u_dot_b[]{-1.29249793785305,-1.28863719172842,
		1.65350463041262,0.456066717040007,
		-1.56976591868037,-0.518007602446926,
		1.42500452780045,1.16312249077394,
		-0.487660119419236,0.604621409654585,
		1.87710425727744,0.472277635823185 };


	const double B[]{ 0.854463601335834,0.915158806735392,0.81779406393944,0,0,0,
		0.915158806735392,1.51973084603713,1.08911106493401,0,0,0,
		0.81779406393944,1.08911106493401,1.00718816511107,0,0,0,
		0,0,0,1.16505945742745,0.55867090856838,1.06119850911405,
		0,0,0,0.55867090856838,0.321956437380287,0.442097312015519,
		0,0,0,1.06119850911405,0.442097312015519,1.05023839402297 };

	const double B_llt[]{ 0.924372003760301,0.990033020269512,0.88470232829715,0,0,0,
		0.990033020269512,0.734551199585949,0.290281394858118,0,0,0,
		0.88470232829715,0.290281394858118,0.374468512983265,0,0,0,
		0,0,0,1.07937920001613,0.517585394048759,0.983156344960322,
		0,0,0,0.517585394048759,0.232511929258862, - 0.287168286010691,
		0,0,0,0.983156344960322, - 0.287168286010691,0.0342982637594407 };

	const double C[]{ 1.09756159899368,0.494892128610864,0,0,0,0.599982575914901,
		0.494892128610864,0.564212545623307,0,0,0,0.200848874880563,
		0,0,0.979041348469538,0.638782936554467,0.663380272499309,0,
		0,0,0.638782936554467,0.791575910209436,0.454993751889092,0,
		0,0,0.663380272499309,0.454993751889092,0.470703623796929,0,
		0.599982575914901,0.200848874880563,0,0,0,1.00673482446645 };

	const double C_llt[]{ 1.04764574117097,0.472384995387576,0,0,0,0.572696048231236,
		0.472384995387576,0.584007672685888,0,0,0, -0.119320598822187,
		0,0,0.989465183050691,0.645584046307713,0.670443269619648,0,
		0,0,0.645584046307713,0.612206786439351,0.0362071665314066,0,
		0,0,0.670443269619648,0.0362071665314066,0.141061997399768,0,
		0.572696048231236, -0.119320598822187,0,0,0,0.815178910119423 };
	double result[36];

	std::copy_n(A, 36, result);
	s_llt(6, A, result);
	if (!s_is_equal(36, llt, result, error))std::cout << "\"s_llt\" failed" << std::endl;

	s_inv_lm(6, llt, result);
	if (!s_is_equal(36, inv_l, result, error))std::cout << "\"s_inv_lm\" failed" << std::endl;

	s_sov_lm(6, 2, llt, b, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_sov_lm\" failed" << std::endl;

	s_sov_lmNT(6, 2, llt, bT, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_sov_lmNT\" failed" << std::endl;

	s_sov_um(6, 2, llt, b, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_sov_um\" failed" << std::endl;

	s_sov_umNT(6, 2, llt, bT, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_sov_umNT\" failed" << std::endl;

	BlockMatrix A_blk, L_blk, b_blk;
	BlockSize blk_size{ 1,3,2 };
	BlockSize b_blk_size{ 1,1 };
	
	s_blk_make(A, blk_size, blk_size, A_blk);
	s_blk_resolve(blk_size, blk_size, A_blk, result);
	if(!s_is_equal(36, A, result, error))std::cout << "\"s_make_symetric_blk\" or \"s_resolve_symetric_blk\" failed" << std::endl;

	s_blk_allocate(blk_size, blk_size, L_blk);
	for (std::size_t i = 0; i < blk_size.size(); ++i)for (std::size_t j = 0; j < blk_size.size(); ++j)
		if (L_blk[i][j].capacity()<static_cast<std::size_t>(blk_size[i]*blk_size[j]))std::cout << "\"s_allocate_symetric_blk\" failed" << std::endl;

	s_blk_llt(blk_size, A_blk, L_blk);
	s_blk_resolve(blk_size, blk_size, L_blk, result);
	if (!s_is_equal(36, llt, result, error))std::cout << "\"s_resolve_symetric_blk\" failed" << std::endl;


	blk_size = { 1,2,2,1 };
	s_blk_make(B, blk_size, blk_size, A_blk);
	A_blk[2][0].clear();
	A_blk[2][1].clear();
	A_blk[3][0].clear();
	A_blk[3][1].clear();
	A_blk[0][2].clear();
	A_blk[1][2].clear();
	A_blk[0][3].clear();
	A_blk[1][3].clear();
	s_blk_resolve(blk_size, blk_size, A_blk, result);
	if (!s_is_equal(36, B, result, error))std::cout << "\"s_blk_make\" or \"s_blk_resolve\" failed" << std::endl;

	s_blk_allocate(blk_size, blk_size, L_blk);
	s_blk_llt(blk_size, A_blk, L_blk);
	s_blk_resolve(blk_size, blk_size, L_blk, result);
	if (!s_is_equal(36, B_llt, result, error))std::cout << "\"s_blk_llt\" failed" << std::endl;
	if(s_blk_check_empty_num(A_blk)!=8)std::cout << "\"s_blk_llt\" failed:wrong empty num" << std::endl;

	blk_size = { 2,3,1 };
	s_blk_make(C, blk_size, blk_size, A_blk);
	A_blk[1][0].clear();
	A_blk[0][1].clear();
	A_blk[1][2].clear();
	A_blk[2][1].clear();
	s_blk_resolve(blk_size, blk_size, A_blk, result);
	if (!s_is_equal(36, C, result, error))std::cout << "\"s_blk_make\" or \"s_blk_resolve\" failed" << std::endl;

	s_blk_allocate(blk_size, blk_size, L_blk);
	s_blk_llt(blk_size, A_blk, L_blk);
	s_blk_resolve(blk_size, blk_size, L_blk, result);
	if (!s_is_equal(36, C_llt, result, error))std::cout << "\"s_blk_llt\" failed" << std::endl;
	if (s_blk_check_empty_num(A_blk) != 4)std::cout << "\"s_blk_llt\" failed:wrong empty num" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 2 }, b_blk);
	s_blk_sov_lm(blk_size, { 2 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 2 }, b_blk, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_blk_sov_lm\" failed" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 1,1 }, b_blk);
	s_blk_sov_lm(blk_size, { 1,1 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 1,1 }, b_blk, result);
	if (!s_is_equal(12, inv_l_dot_b, result, error))std::cout << "\"s_blk_sov_lm\" failed" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 2 }, b_blk);
	s_blk_sov_um(blk_size, { 2 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 2 }, b_blk, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_blk_sov_um\" failed" << std::endl;

	s_blk_make(llt, blk_size, blk_size, L_blk);
	s_blk_make(b, blk_size, { 1,1 }, b_blk);
	s_blk_sov_um(blk_size, { 1,1 }, L_blk, b_blk, b_blk);
	s_blk_resolve(blk_size, { 1,1 }, b_blk, result);
	if (!s_is_equal(12, inv_u_dot_b, result, error))std::cout << "\"s_blk_sov_um\" failed" << std::endl;
}
void test_mtx_blk()
{
	const double A[]{ 0.083469814858914,0.0604711791698936,0.291984079961715,0.372409740055537,0.0526769976807926,0.417744104316662,0.698105520180308,0.032600820530528,0.460725937260412,
		0.133171007607162,0.399257770613576, 0.43165117024872,0.198118402542975,0.737858095516997,0.983052466469856,0.666527913402587, 0.56119979270966, 0.98163795097075,
		0.173388613119006,0.526875830508296,0.015487125636019,0.489687638016024,0.269119426398556,0.301454948712065,0.178132454400338, 0.88186650045181,0.156404952226563,
		0.390937802323736,0.416799467930787,0.984063724379154,0.339493413390758,0.422835615008808,0.701098755900926,0.128014399720173,0.669175304534394,0.855522805845911,
		0.83137974283907,0.656859890973707,0.167168409914656,0.951630464777727,0.547870901214845,0.666338851584426,0.999080394761361,0.190433267179954,0.644764536870088,
		0.80336439160244,0.627973359190104,0.106216344928664,0.920332039836564,0.942736984276934,0.539126465042857,0.171121066356432,0.368916546063895,0.376272210278832 };
	const double AT[]{ 0.083469814858914,0.133171007607162,0.173388613119006,0.390937802323736, 0.83137974283907, 0.80336439160244,
		0.0604711791698936,0.399257770613576,0.526875830508296,0.416799467930787,0.656859890973707,0.627973359190104,
		0.291984079961715, 0.43165117024872,0.015487125636019,0.984063724379154,0.167168409914656,0.106216344928664,
		0.372409740055537,0.198118402542975,0.489687638016024,0.339493413390758,0.951630464777727,0.920332039836564,
		0.0526769976807926,0.737858095516997,0.269119426398556,0.422835615008808,0.547870901214845,0.942736984276934,
		0.417744104316662,0.983052466469856,0.301454948712065,0.701098755900926,0.666338851584426,0.539126465042857,
		0.698105520180308,0.666527913402587,0.178132454400338,0.128014399720173,0.999080394761361,0.171121066356432,
		0.032600820530528, 0.56119979270966, 0.88186650045181,0.669175304534394,0.190433267179954,0.368916546063895,
		0.460725937260412, 0.98163795097075,0.156404952226563,0.855522805845911,0.644764536870088,0.376272210278832 };
	const double B[]{ 0.32514568182056,0.440085139001721,0.676122303863752,0.344462411301042,0.424349039815375,
		0.105629203329022,0.527142741760652,0.289064571674477,0.780519652731358,0.460916366028964,
		0.610958658746201,0.457424365687674,0.671808165414215,   0.675332065747,0.770159728608609,
		0.778802241824093,0.875371598604185,0.695140499551737,0.00671531431847749,0.322471807186779,
		0.423452918962738,0.518052108361104,0.0679927684700106,0.602170487581795,0.784739294760742,
		0.0908232857874395,0.943622624548388,0.254790156597005,0.386771194520985,0.471357153710612,
		0.266471490779072,0.637709098072174,0.224040030824219,0.915991244131425,0.0357627332691179,
		0.153656717591307,0.957693939841583,0.667832727013717,0.00115105712910724,0.175874415683531,
		0.281005302533871, 0.24070703548016,0.844392156527205,0.462449159242329,0.721758033391102 };
	const double BT[]{ 0.32514568182056,0.105629203329022,0.610958658746201,0.778802241824093,0.423452918962738,0.0908232857874395,0.266471490779072,0.153656717591307,0.281005302533871,
		0.440085139001721,0.527142741760652,0.457424365687674,0.875371598604185,0.518052108361104,0.943622624548388,0.637709098072174,0.957693939841583,0.24070703548016,
		0.676122303863752,0.289064571674477,0.671808165414215,0.695140499551737,0.0679927684700106,0.254790156597005,0.224040030824219,0.667832727013717,0.844392156527205,
		0.344462411301042,0.780519652731358,  0.675332065747,0.00671531431847749,0.602170487581795,0.386771194520985,0.915991244131425,0.00115105712910724,0.462449159242329,
		0.424349039815375,0.460916366028964,0.770159728608609,0.322471807186779,0.784739294760742,0.471357153710612,0.0357627332691179,0.175874415683531,0.721758033391102 };
	const double C[]{ 0.882699220389462,1.53696035254701,1.20617784639246,1.32148852911613,1.00973535379553,
		1.44490982798386,3.14862260940081,2.28680308612416,2.54000934334887,2.51030105404234,
		0.871122945877781,2.20946761947791,1.47636028538785,0.999872211710309,1.11389732784129,
		1.65682740032538,2.94813131784912,2.68725848495219,2.16628320911793,2.62740013735909,
		1.9521547101672,3.50893087374696,2.62828481759543,2.71952708284136,2.36977862102099,
		1.76538308227268,3.08892358329822,2.23971174415062,1.95216979243096,2.34543889613871 };

	double result[100];

	BlockSize m{ 2,4 }, n{ 3,2 }, k{ 1,3,5 };
	BlockMatrix a, at, b, bt, c;

	s_blk_make(A, m, k, a);
	s_blk_make(AT, k, m, at);
	s_blk_make(B, k, n, b);
	s_blk_make(BT, n, k, bt);
	
	s_blk_allocate(m, n, c);
	s_blk_mm(m, n, k, a, b, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mm\" failed" << std::endl;

	s_blk_allocate(m, n, c);
	s_blk_mmNT(m, n, k, a, bt, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mmNT\" failed" << std::endl;

	s_blk_allocate(m, n, c);
	s_blk_mmTN(m, n, k, at, b, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mmTN\" failed" << std::endl;

	s_blk_allocate(m, n, c);
	s_blk_mmTT(m, n, k, at, bt, c);
	s_blk_resolve(m, n, c, result);
	if (!s_is_equal(30, result, C, error))std::cout << "\"s_blk_mmTT\" failed" << std::endl;


	const double x[]{ 0.32514568182056,0.105629203329022,0.610958658746201,0.778802241824093,0.423452918962738,0.0908232857874395,0.266471490779072,0.153656717591307,0.281005302533871 };
	BlockMatrix x_blk;
	s_blk_make(x, { 1,3,5 }, { 1 }, x_blk);
	if (!s_is_equal(s_blk_norm({ 1,3,5 }, x_blk), 1.20740354633406, error))std::cout << "\"s_blk_norm\" failed" << std::endl;

	s_blk_make(A, { 2,3,1 }, { 3,4,2 }, a);
	if(!s_is_equal(s_blk_norm_col({ 2,3,1 }, {3,4,2}, a, 0, 0, a[0][0].data() + 4), 1.19855836773142, error))std::cout << "\"s_blk_norm_col\" failed" << std::endl;

	s_blk_make(A, { 2,3,1 }, { 3,4,2 }, a);
	if (!s_is_equal(s_blk_norm_row({ 2,3,1 }, { 3,4,2 }, a, 0, 0, a[0][0].data() + 4), 1.9022683449028, error))std::cout << "\"s_blk_norm_row\" failed" << std::endl;
}

void test_matrix()
{
	std::cout << std::endl << "-----------------test kernel--------------------" << std::endl;

	test_mtx_basic_operation();
	test_mtx_and_vec();
	test_mtx_householder();
	test_mtx_solver();
	test_mtx_blk();

	std::cout << "-----------------test kernel finished-----------" << std::endl << std::endl;
}